{"version":3,"sources":["views/apps/cms/location/city/add/index.js","views/apps/cms/location/city/index.js","constants/validate.js","@core/components/extensions-header/index.js","@core/components/sidebar/index.js"],"names":["SidebarAdd","_ref","_errors$name","_errors$code","open","toggleSidebar","addCity","disable","setDisable","CityOptions","validateOptions","_useForm","useForm","register","errors","handleSubmit","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","isObjEmpty","stop","_x","apply","arguments","_jsx","Sidebar","size","title","FormattedMessage","id","headerClassName","contentClassName","children","_jsxs","Form","FormGroup","Label","for","className","Input","name","placeholder","innerRef","onBlur","document","getElementById","value","trim","classNames","message","type","code","style","textAlign","Button","color","disabled","outline","onClick","CustomHeader","data","Row","Col","xl","Ripple","CityList","useDispatch","store","useSelector","state","abouts","_useState","common","language","useState","_useState2","_slicedToArray","sidebarOpen","setSidebarOpen","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","listCity","setListCity","_useState9","_useState10","count","setCount","_useState11","_useState12","currentPage","setCurrentPage","_useState13","_useState14","rowsPerPage","location","useLocation","_useState15","split","pathname","length","country_id","columns","minWidth","selector","sortable","cell","row","UncontrolledDropdown","DropdownToggle","tag","MoreVertical","DropdownMenu","right","DropdownItem","Link","to","concat","Edit","handleDelete","is_deleted","Trash2","request","send","method","api","UPDATE_CITY","path","then","result","statusCode","toast","success","getCity","warn","useEffect","FIND_CITY","filter","skip","limit","order","key","total","ExtensionsHeader","Card","DataTable","noHeader","subHeader","responsive","paginationServer","noDataComponent","role","padding","background","sortIcon","ChevronDown","subHeaderComponent","ReactPaginate","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","page","selected","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","CREATE_CITY","_objectSpread","catch","AboutOptions","about","maxLength","PartnerOptions","required","DocumentOptions","label","validate","REGEX","TITLE","test","sort_order","pattern","short_content","DiscountOptions","discount","min","time","parseInt","PriceOptions","price","Document_Link_Options","document_link","CategoryOptions","minLength","message_content","BranchOptions","code_branch","email","EMAIL","phone","addpress","EditBranchOptions","Document_course","EditCategoryOptions","EditDocumentOptions","author","EditQuizOptions","contenttext","answer","TermOptions","KindOptions","EditKindOptions","TranscriptOptions","score","EditTranscriptOptions","student_code","CertificateOptions","UserCertificateOptions","EditCertificateOptions","provider","position","ProductOptions","product_name","NAME2","alidate","SPACE","vat","max","number_trial","categoryId","service_price_local","PRICE","service_price_cloud","VersionOptions","version","infor","StaffOptions","last_name","NAME","first_name","username","USERNAME","password","EditStaffOptions","UserOptions","PASSWORD","EditUserOptions","CountryOptions","phone_code","PHONE_CODE","StudentOptions","date","CloudOptions","props","sm","link","href","target","rel","subTitle","_classnames3","width","bodyClassName","wrapperClassName","closeBtn","rest","_objectWithoutProperties","_excluded","renderCloseBtn","X","Modal","isOpen","classnames","_defineProperty","modalClassName","undefined","String","ModalHeader","toggle","close","ModalBody"],"mappings":"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","file":"static/js/129.3e6d1883.chunk.js","sourcesContent":["// ** React Import\r\nimport Sidebar from \"@components/sidebar\";\r\nimport { isObjEmpty } from \"@utils\";\r\nimport classNames from \"classnames\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport validateOptions from \"../../../../../../constants/validate\";\r\n\r\nconst SidebarAdd = ({ open, toggleSidebar, addCity, disable, setDisable }) => {\r\n  const CityOptions = validateOptions.CityOptions;\r\n  const { register, errors, handleSubmit } = useForm();\r\n  const onSubmit = async (values) => {\r\n    if (isObjEmpty(errors)) {\r\n      setDisable(true);\r\n    }\r\n    addCity(values);\r\n  };\r\n\r\n  return (\r\n    <Sidebar\r\n      size=\"lg\"\r\n      open={open}\r\n      title={<FormattedMessage id=\"Add new city\" />}\r\n      headerClassName=\"mb-1\"\r\n      contentClassName=\"pt-0\"\r\n      toggleSidebar={toggleSidebar}\r\n    >\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <FormGroup>\r\n          <Label for=\"name\">\r\n            <FormattedMessage id=\"name\" />{\" \"}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Input\r\n            name=\"name\"\r\n            id=\"name\"\r\n            placeholder=\" \"\r\n            innerRef={register(CityOptions.name)}\r\n            onBlur={() => {\r\n              let name = document.getElementById(\"name\");\r\n              if (name && name.value) {\r\n                name.value = name.value.trim();\r\n              }\r\n            }}\r\n            className={classNames({ \"is-invalid\": errors[\"name\"] })}\r\n          />\r\n          <small className=\"text-danger\">\r\n            {errors?.name && errors.name.message}\r\n          </small>\r\n          {errors?.name?.type == \"validate\" && (\r\n            <small className=\"text-danger\">\r\n              <FormattedMessage id=\"Invalid city name\" />\r\n            </small>\r\n          )}\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"code\">\r\n            <FormattedMessage id=\"city code\" />{\" \"}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Input\r\n            name=\"code\"\r\n            id=\"code\"\r\n            placeholder=\" \"\r\n            innerRef={register(CityOptions.code)}\r\n            onBlur={() => {\r\n              let code = document.getElementById(\"code\");\r\n              if (code && code.value) {\r\n                code.value = code.value.trim();\r\n              }\r\n            }}\r\n            className={classNames({ \"is-invalid\": errors[\"code\"] })}\r\n          />\r\n          <small className=\"text-danger\">\r\n            {errors?.code && errors.code.message}\r\n          </small>\r\n          {errors?.code?.type == \"validate\" && (\r\n            <small className=\"text-danger\">\r\n              <FormattedMessage id=\"Invalid city code\" />\r\n            </small>\r\n          )}\r\n        </FormGroup>\r\n        <div style={{ textAlign: \"end\" }}>\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"mr-1\"\r\n            color=\"primary\"\r\n            disabled={disable}\r\n          >\r\n            <FormattedMessage id=\"add\" />\r\n          </Button>\r\n          <Button\r\n            type=\"reset\"\r\n            color=\"secondary\"\r\n            outline\r\n            onClick={toggleSidebar}\r\n          >\r\n            <FormattedMessage id=\"Cancel\" />\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Sidebar>\r\n  );\r\n};\r\n\r\nexport default SidebarAdd;\r\n","import ExtensionsHeader from \"@components/extensions-header\";\r\nimport { useEffect, useState } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { ChevronDown, Edit, MoreVertical, Trash2 } from \"react-feather\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport {\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n} from \"reactstrap\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Card, Col, Row } from \"reactstrap\";\r\nimport api from \"../../../../../constants/api\";\r\nimport request from \"../../../../../services/request\";\r\nimport Sidebar from \"./add/index\";\r\n\r\nconst CustomHeader = ({ toggleSidebar, data }) => {\r\n  return (\r\n    <div className=\"invoice-list-table-header w-100 mr-1 ml-50 mt-1 mb-75\">\r\n      {\r\n        <Row className=\"justify-content-end\">\r\n          <Col\r\n            xl=\"6\"\r\n            className=\"d-flex align-items-sm-center justify-content-lg-end justify-content-start flex-lg-nowrap flex-wrap flex-sm-row flex-column pr-lg-1 p-0 mt-lg-0 mt-1\"\r\n          >\r\n            <Button.Ripple color=\"primary\" onClick={toggleSidebar}>\r\n              <FormattedMessage id=\"Add\" />\r\n            </Button.Ripple>\r\n          </Col>\r\n        </Row>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CityList = () => {\r\n  const dispatch = useDispatch();\r\n  const store = useSelector((state) => state.abouts);\r\n  const lang = useSelector((state) => state.common.language);\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n  const [disable, setDisable] = useState(false);\r\n  const [loadData, setLoadData] = useState(false);\r\n  const [listCity, setListCity] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(20);\r\n  const location = useLocation();\r\n  const [country_id] = useState(() => {\r\n    const split = location.pathname.split(\"/\");\r\n    return split[split.length - 1];\r\n  });\r\n  const columns = [\r\n    {\r\n      name: <FormattedMessage id=\"id\" />,\r\n      minWidth: \"258px\",\r\n      selector: \"id\",\r\n      sortable: false,\r\n      cell: (row) => row?.id,\r\n    },\r\n\r\n    {\r\n      name: <FormattedMessage id=\"name\" />,\r\n      minWidth: \"258px\",\r\n      selector: \"name\",\r\n      sortable: false,\r\n      cell: (row) => row?.name,\r\n    },\r\n    {\r\n      name: <FormattedMessage id=\"city code\" />,\r\n      minWidth: \"308px\",\r\n      selector: \"code\",\r\n      sortable: false,\r\n      cell: (row) => <span className=\"text-ellipse-1\">{row?.code}</span>,\r\n    },\r\n    {\r\n      name: <FormattedMessage id=\"actions\" />,\r\n      minWidth: \"100px\",\r\n      cell: (row) => (\r\n        <UncontrolledDropdown>\r\n          <DropdownToggle tag=\"div\" className=\"btn btn-sm\">\r\n            <MoreVertical size={14} className=\"cursor-pointer\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu right>\r\n            <DropdownItem\r\n              tag={Link}\r\n              to={`/apps/cms/location/city/edit/${row.id}`}\r\n              className=\"w-100\"\r\n            >\r\n              <Edit size={14} className=\"mr-50\" />\r\n              <span className=\"align-middle\">\r\n                <FormattedMessage id=\"edit\" />\r\n              </span>\r\n            </DropdownItem>\r\n            <DropdownItem\r\n              className=\"w-100\"\r\n              onClick={() => {\r\n                handleDelete({\r\n                  id: row.id,\r\n                  data: {\r\n                    is_deleted: 1,\r\n                  },\r\n                });\r\n              }}\r\n            >\r\n              <Trash2 size={14} className=\"mr-50\" />\r\n\r\n              <span className=\"align-middle\">\r\n                <FormattedMessage id=\"delete\" />\r\n              </span>\r\n            </DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      ),\r\n    },\r\n  ];\r\n  const handleDelete = (data) => {\r\n    request\r\n      .send({\r\n        method: api.UPDATE_CITY.method,\r\n        path: api.UPDATE_CITY.path,\r\n        data,\r\n      })\r\n      .then((result) => {\r\n        if (result) {\r\n          const { statusCode, data } = result;\r\n          if (statusCode === 200) {\r\n            toast.success(<FormattedMessage id={\"Delete successful!\"} />);\r\n            getCity();\r\n          } else if (statusCode == 400) {\r\n            toast.warn(<FormattedMessage id={\"Delete failed!\"} />);\r\n          }\r\n        }\r\n      });\r\n  };\r\n  const toggleSidebar = () => {\r\n    setDisable(false);\r\n    setSidebarOpen(!sidebarOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCity();\r\n    setDisable(false);\r\n  }, [currentPage]);\r\n  const getCity = () => {\r\n    request\r\n      .send({\r\n        method: api.FIND_CITY.method,\r\n        path: api.FIND_CITY.path,\r\n        data: {\r\n          filter: {\r\n            country_id,\r\n          },\r\n          skip: (currentPage - 1) * rowsPerPage,\r\n          limit: rowsPerPage,\r\n          order: {\r\n            key: \"id\",\r\n            value: \"ASC\",\r\n          },\r\n        },\r\n      })\r\n      .then((result) => {\r\n        if (result) {\r\n          const { statusCode, data } = result;\r\n          if (statusCode === 200) {\r\n            setListCity(data?.data);\r\n            setCount(data?.total / rowsPerPage);\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  const addCity = (data) => {\r\n    request\r\n      .send({\r\n        method: api.CREATE_CITY.method,\r\n        path: api.CREATE_CITY.path,\r\n        data: {\r\n          ...data,\r\n          country_id,\r\n        },\r\n      })\r\n      .then((result) => {\r\n        if (result) {\r\n          const { statusCode, data } = result;\r\n          if (statusCode === 200) {\r\n            toast.success(<FormattedMessage id={\"successfully added new!\"} />);\r\n            setDisable(false);\r\n            getCity();\r\n            toggleSidebar();\r\n          } else if (statusCode == 400) {\r\n            toast.warn(<FormattedMessage id={\"Add new failure!\"} />);\r\n            setDisable(false);\r\n          }\r\n        }\r\n      })\r\n      .catch((result) => {\r\n        setDisable(false);\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"app-user-list\">\r\n      <ExtensionsHeader title={<FormattedMessage id=\"city\" />} />\r\n      <Card>\r\n        <DataTable\r\n          noHeader\r\n          subHeader\r\n          responsive\r\n          paginationServer\r\n          noDataComponent={\r\n            <div className=\"sc-fznWqX gnahTY\">\r\n              <div className=\"sc-AxjAm gIMaKV rdt_Table\" role=\"table\">\r\n                <div className=\"sc-fzqARJ icdHOq\">\r\n                  <div\r\n                    style={{\r\n                      padding: \"25px \",\r\n                      textAlign: \"center\",\r\n                      color: \"black\",\r\n                      background: \"white\",\r\n                    }}\r\n                  >\r\n                    <FormattedMessage id={\"There are no records to display\"} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n          columns={columns}\r\n          sortIcon={<ChevronDown />}\r\n          className=\"react-dataTable\"\r\n          data={listCity}\r\n          subHeaderComponent={\r\n            <CustomHeader toggleSidebar={toggleSidebar} data={store?.data} />\r\n          }\r\n        />\r\n      </Card>\r\n      {count > 0 && (\r\n        <ReactPaginate\r\n          previousLabel={\"\"}\r\n          nextLabel={\"\"}\r\n          pageCount={count || 0}\r\n          activeClassName=\"active\"\r\n          forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n          onPageChange={(page) => {\r\n            setCurrentPage(page.selected + 1);\r\n          }}\r\n          pageClassName={\"page-item\"}\r\n          nextLinkClassName={\"page-link\"}\r\n          nextClassName={\"page-item next\"}\r\n          previousClassName={\"page-item prev\"}\r\n          previousLinkClassName={\"page-link\"}\r\n          pageLinkClassName={\"page-link\"}\r\n          containerClassName={\r\n            \"pagination react-paginate justify-content-center my-2 pr-1\"\r\n          }\r\n        />\r\n      )}\r\n      <Sidebar\r\n        open={sidebarOpen}\r\n        toggleSidebar={toggleSidebar}\r\n        disabled={disable}\r\n        {...{ addCity, disable, setDisable }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityList;\r\n","import { FormattedMessage } from \"react-intl\";\r\nimport REGEX from \"./regex\";\r\nimport { number } from \"yup\";\r\nconst validateOptions = {\r\n  AboutOptions: {\r\n    about: {\r\n      // required: <FormattedMessage id=\"The about title field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"About title up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  PartnerOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DocumentOptions: {\r\n    label: {\r\n      required: <FormattedMessage id=\"the label field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Label up to 255 characters\" />,\r\n      },\r\n    },\r\n\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n\r\n    short_content: {\r\n      required: <FormattedMessage id=\"the short content field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DiscountOptions: {\r\n    discount: {\r\n      required: <FormattedMessage id=\"the discount field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"The discount is not suitable\" />,\r\n      },\r\n    },\r\n    time: {\r\n      required: <FormattedMessage id=\"The time price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  PriceOptions: {\r\n    price: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n    },\r\n  },\r\n  Document_Link_Options: {\r\n    document_link: {\r\n      required: (\r\n        <FormattedMessage id=\"The time document link field is required\" />\r\n      ),\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  CategoryOptions: {\r\n    code: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n\r\n    message_content: {\r\n      maxLength: {\r\n        value: 30,\r\n        message: <FormattedMessage id=\"Category must be 30 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  BranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n    // short_content: {\r\n    //   required: <FormattedMessage id=\"the short content field is required\" />,\r\n    //   validate: (value) => !REGEX.TITLE.test(value),\r\n    //   maxLength: {\r\n    //     value: 255,\r\n\r\n    //     message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n    //   },\r\n    // },\r\n    // content: {\r\n    //   required: <FormattedMessage id=\"the content field is required\" />,\r\n    //   maxLength: {\r\n    //     value: 3000,\r\n    //     message: <FormattedMessage id=\"Content up to 3000 characters\" />,\r\n    //   },\r\n    // },\r\n  },\r\n\r\n  EditBranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n  },\r\n\r\n  Document_course: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditCategoryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n      // pattern: {\r\n      //   value: REGEX.NAME2,\r\n      //   message: <FormattedMessage id=\"Invalid category name\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditDocumentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    author: {\r\n      required: <FormattedMessage id=\"The Author name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Author name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Author must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  EditQuizOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    contenttext: {\r\n      required: <FormattedMessage id=\"The content field is required\" />,\r\n    },\r\n    answer: {\r\n      required: <FormattedMessage id=\"The answer field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  TermOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    //Học phần\r\n  },\r\n  KindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditKindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  TranscriptOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditTranscriptOptions: {\r\n    student_code: {\r\n      required: <FormattedMessage id=\"The student code field is required\" />,\r\n    },\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  CertificateOptions: {},\r\n  UserCertificateOptions: {},\r\n\r\n  EditCertificateOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"The title must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"The title must be 70 characters max\" />,\r\n      },\r\n    },\r\n    provider: {\r\n      required: <FormattedMessage id=\"Provider field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Provider must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Provider must be 70 characters max\" />,\r\n      },\r\n    },\r\n    position: {\r\n      required: <FormattedMessage id=\"Position field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Position must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Position must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  ProductOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The product's name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Product name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Product name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    vat: {\r\n      required: <FormattedMessage id=\"The VAT field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"VAT more than 0\" />,\r\n      },\r\n      max: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"VAT less than 100\" />,\r\n      },\r\n    },\r\n    number_trial: {\r\n      // required: <FormattedMessage id=\"The Number day field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be greater than or equal to 0\" />\r\n        ),\r\n      },\r\n      max: {\r\n        value: 30,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be less than or equal to 30\" />\r\n        ),\r\n      },\r\n      validate: (value) =>\r\n        value >= 0 || (\r\n          <FormattedMessage id=\"Number day must be a positive number\" />\r\n        ),\r\n    },\r\n    categoryId: {\r\n      required: <FormattedMessage id=\"The category field is required\" />,\r\n      min: {\r\n        value: 0,\r\n      },\r\n    },\r\n    service_price_local: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n\r\n    service_price_cloud: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n  },\r\n  VersionOptions: {\r\n    version: {\r\n      required: <FormattedMessage id=\"The version field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Version up to 255 characters\" />,\r\n      },\r\n    },\r\n    infor: {\r\n      maxLength: {\r\n        value: 500,\r\n        message: <FormattedMessage id=\"Information up to 500 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  StaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditStaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  UserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|\\\\d)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditUserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  CityOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The city name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The city code field is required\" />,\r\n      alidate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n  },\r\n  CountryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The country name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The country code field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    phone_code: {\r\n      required: <FormattedMessage id=\"The phone code field is required\" />,\r\n      validate: (value) => REGEX.PHONE_CODE.test(value),\r\n    },\r\n  },\r\n  StudentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    date: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    },\r\n    // gender: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // courseId: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // formality: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n  },\r\n\r\n  CloudOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The cloud name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Cloud name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Cloud name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    // vat: {\r\n    //   required: <FormattedMessage id=\"The VAT field is required\" />,\r\n    //   min: {\r\n    //     value: 0,\r\n    //     message: <FormattedMessage id=\"VAT more than 0\" />,\r\n    //   },\r\n    //   max: {\r\n    //     value: 100,\r\n    //     message: <FormattedMessage id=\"VAT less than 100\" />,\r\n    //   },\r\n    // },\r\n  },\r\n};\r\nexport default validateOptions;\r\n","// ** React Imports\r\nimport Proptypes from 'prop-types'\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nconst ExtensionsHeader = props => {\r\n  return (\r\n    <Row className='mb-2'>\r\n      <Col sm='12' className='ml-50'>\r\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\r\n          {props.title}\r\n        </p>\r\n        {props.link ? (\r\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\r\n            {props.subTitle}\r\n          </a>\r\n        ) : (\r\n          <p className='text-primary'>{props.subTitle}</p>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\nexport default ExtensionsHeader\r\n\r\n// ** PropTypes\r\nExtensionsHeader.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  subTitle: Proptypes.string.isRequired,\r\n  link: Proptypes.string\r\n}\r\n","// ** Third Party Components\r\nimport { X } from 'react-feather'\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\r\n\r\nconst Sidebar = props => {\r\n  // ** Props\r\n  const {\r\n    width,\r\n    open,\r\n    toggleSidebar,\r\n    size,\r\n    bodyClassName,\r\n    contentClassName,\r\n    wrapperClassName,\r\n    headerClassName,\r\n    className,\r\n    title,\r\n    children,\r\n    closeBtn,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** If user passes custom close btn render that else default close btn\r\n  const renderCloseBtn = closeBtn ? closeBtn : <X className='cursor-pointer' size={15} onClick={toggleSidebar} />\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={open}\r\n      // toggle={toggleSidebar}\r\n      contentClassName={classnames({\r\n        [contentClassName]: contentClassName\r\n      })}\r\n      modalClassName={classnames('modal-slide-in', {\r\n        [wrapperClassName]: wrapperClassName\r\n      })}\r\n      className={classnames({\r\n        [className]: className,\r\n        'sidebar-lg': size === 'lg',\r\n        'sidebar-sm': size === 'sm'\r\n      })}\r\n      /*eslint-disable */\r\n      {...(width !== undefined\r\n        ? {\r\n            style: { width: String(width) + 'px' }\r\n          }\r\n        : {})}\r\n      /*eslint-enable */\r\n      {...rest}\r\n    >\r\n      <ModalHeader\r\n        className={classnames({\r\n          [headerClassName]: headerClassName\r\n        })}\r\n        toggle={toggleSidebar}\r\n        close={renderCloseBtn}\r\n        tag='div'\r\n      >\r\n        <h5 className='modal-title'>\r\n          <span className='align-middle'>{title}</span>\r\n        </h5>\r\n      </ModalHeader>\r\n      <ModalBody\r\n        className={classnames('flex-grow-1', {\r\n          [bodyClassName]: bodyClassName\r\n        })}\r\n      >\r\n        {children}\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n\r\n// ** PropTypes\r\nSidebar.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  open: Proptypes.bool.isRequired,\r\n  toggleSidebar: Proptypes.func.isRequired,\r\n  size: Proptypes.oneOf(['sm', 'lg']),\r\n  className: Proptypes.string,\r\n  bodyClassName: Proptypes.string,\r\n  contentClassName: Proptypes.string,\r\n  wrapperClassName: Proptypes.string,\r\n  children: Proptypes.any.isRequired,\r\n  width: Proptypes.oneOfType([Proptypes.number, Proptypes.string])\r\n}\r\n"],"sourceRoot":""}