{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","_ref","name","roleName","_jsx","Fragment","children","className","_jsxs","Avatar","size","color","icon","Coffee","FormattedMessage","id","Login","props","_useSkin","useSkin","skin","_slicedToArray","dispatch","useDispatch","_useState","useState","_useState2","disable","setDisable","_useForm","useForm","register","errors","handleSubmit","illustration","source","require","concat","default","loginOptions","username","required","minLength","value","message","maxLength","password","_Fragment","Row","Col","lg","sm","src","alt","md","CardTitle","tag","IntlDropdown","Form","onSubmit","data","isObjEmpty","Service","send","method","api","LOGIN_STAFF","path","then","result","statusCode","newData","_objectSpread","accessToken","token","refreshToken","handleLogin","toast","success","transition","Slide","hideProgressBar","autoClose","setTimeout","window","location","href","getHomeRouteForLoggedInUser","catch","FormGroup","Label","for","Input","autoFocus","type","classnames","innerRef","InputPasswordToggle","Button","Ripple","style","marginLeft","block","disabled","label","hideIcon","showIcon","visible","htmlFor","placeholder","iconSize","inputClassName","rest","_objectWithoutProperties","_excluded","inputVisibility","setInputVisibility","InputGroup","_defineProperty","InputGroupAddon","addonType","onClick","InputGroupText","Eye","EyeOff","renderIcon","defaultProps"],"mappings":"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","file":"static/js/148.88f8d878.chunk.js","sourcesContent":["import { useState, useEffect, useContext, Fragment } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Avatar from \"@components/avatar\";\r\nimport IntlDropdown from \"./../../../@core/layouts/components/navbar/IntlDropdown\";\r\nimport { useSkin } from \"@hooks/useSkin\";\r\nimport api from \"./../../../constants/api\";\r\n\r\nimport Service from \"./../../../services/request\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast, Slide } from \"react-toastify\";\r\n// import { handleLogin } from '@store/actions/auth'\r\nimport { handleLogin } from \"@store/actions/auth\";\r\nimport { AbilityContext } from \"@src/utility/context/Can\";\r\nimport { format } from \"react-intl\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InputPasswordToggle from \"@components/input-password-toggle\";\r\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from \"@utils\";\r\nimport { Coffee } from \"react-feather\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  CardTitle,\r\n  Form,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  CustomInput,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\nimport \"@styles/base/pages/page-auth.scss\";\r\nimport { FORMAT_ERROR } from \"../../../constants/status\";\r\n\r\nconst ToastContent = ({ name, roleName }) => (\r\n  <Fragment>\r\n    <div className=\"toastify-header\">\r\n      <div className=\"title-wrapper\">\r\n        <Avatar size=\"sm\" color=\"success\" icon={<Coffee size={12} />} />\r\n        <h6 className=\"toast-title font-weight-bold\">\r\n          <FormattedMessage id=\"Welcome\" />, {name}\r\n        </h6>\r\n      </div>\r\n    </div>\r\n    {/* <div className=\"toastify-body\">\r\n      <span>to Kiemdinhoto.vn. Now you can start to explore. Enjoy!</span>\r\n    </div> */}\r\n  </Fragment>\r\n);\r\n\r\nconst Login = (props) => {\r\n  const [skin] = useSkin();\r\n\r\n  const dispatch = useDispatch();\r\n  const [disable, setDisable] = useState(false);\r\n  const { register, errors, handleSubmit } = useForm();\r\n  const illustration = skin === \"dark\" ? \"login-v2-dark.svg\" : \"login-v2.svg\",\r\n    source = require(`@src/assets/images/pages/${illustration}`).default;\r\n\r\n  const loginOptions = {\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 30,\r\n        message: <FormattedMessage id=\"Username must be 30 characters max\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n    },\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    if (isObjEmpty(errors)) {\r\n      setDisable(true);\r\n      Service.send({\r\n        method: api.LOGIN_STAFF.method,\r\n        path: api.LOGIN_STAFF.path,\r\n        data,\r\n      })\r\n        .then((result) => {\r\n          if (result) {\r\n            const { statusCode, data } = result;\r\n            if (statusCode === 200) {\r\n              const newData = {\r\n                ...data,\r\n                accessToken: data.token,\r\n                refreshToken: data.token,\r\n              };\r\n              dispatch(handleLogin(newData));\r\n\r\n              // history.push(getHomeRouteForLoggedInUser('admin'))\r\n              toast.success(<ToastContent name={newData.username} />, {\r\n                transition: Slide,\r\n                hideProgressBar: true,\r\n                autoClose: 2000,\r\n              });\r\n              setTimeout(() => {\r\n                window.location.href = getHomeRouteForLoggedInUser(\"admin\");\r\n              }, 1500);\r\n            }\r\n          }\r\n        })\r\n        .catch((result) => {\r\n          setDisable(false);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"auth-wrapper auth-v2\">\r\n        <Row className=\"auth-inner m-0\">\r\n          <Col\r\n            className=\"d-none d-lg-flex align-items-center p-5\"\r\n            lg=\"8\"\r\n            sm=\"12\"\r\n          >\r\n            <div className=\"w-100 d-lg-flex align-items-center justify-content-center px-5\">\r\n              <img className=\"img-fluid\" src={source} alt=\"Login V2\" />\r\n            </div>\r\n          </Col>\r\n          <Col\r\n            className=\"d-flex align-items-center auth-bg px-2 p-lg-5\"\r\n            lg=\"4\"\r\n            sm=\"12\"\r\n          >\r\n            <Col className=\"px-xl-2 mx-auto\" sm=\"8\" md=\"6\" lg=\"12\">\r\n              <div className=\" \">\r\n                <CardTitle tag=\"h2\" className=\"font-weight-bold mb-1\">\r\n                  <FormattedMessage id=\"JTS-ADMIN\" />! 👋\r\n                </CardTitle>\r\n                <ul className=\"nav  navbar-nav  d-inline-block align-items-center ml-auto\">\r\n                  <IntlDropdown />\r\n                </ul>\r\n              </div>\r\n\r\n              <Form\r\n                className=\"auth-login-form mt-2\"\r\n                onSubmit={handleSubmit(onSubmit)}\r\n              >\r\n                <FormGroup>\r\n                  <Label className=\"form-label\" for=\"login-username\">\r\n                    <FormattedMessage id=\"username\" />\r\n                  </Label>\r\n                  <Input\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    id=\"login-username\"\r\n                    name=\"username\"\r\n                    // placeholder={<FormattedMessage id=\"Email already exists\"/>}\r\n                    className={classnames({\r\n                      \"is-invalid\": errors[\"username\"],\r\n                    })}\r\n                    innerRef={register(loginOptions.username)}\r\n                  />\r\n                  <small className=\"text-danger\">\r\n                    {errors?.username && errors.username.message}\r\n                  </small>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <Label className=\"form-label\" for=\"login-password\">\r\n                      <FormattedMessage id=\"password\" />\r\n                    </Label>\r\n                    {/* <Link to='/forgot-password'>\r\n                    <small>Forgot Password?</small>\r\n                  </Link> */}\r\n                  </div>\r\n                  <InputPasswordToggle\r\n                    id=\"login-password\"\r\n                    name=\"password\"\r\n                    // className='input-group-merge'\r\n                    className={classnames({ \"is-invalid\": errors[\"password\"] })}\r\n                    innerRef={register(loginOptions.password)}\r\n                  />{\" \"}\r\n                  <small className=\"text-danger\">\r\n                    {errors?.password && errors.password.message}\r\n                  </small>\r\n                </FormGroup>\r\n                {/* <FormGroup>s\r\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\r\n              </FormGroup> */}\r\n                <Button.Ripple\r\n                  type=\"submit\"\r\n                  style={{ marginLeft: 0 }}\r\n                  color=\"primary\"\r\n                  block\r\n                  disabled={disable}\r\n                >\r\n                  <FormattedMessage id=\"Sign in\" />\r\n                </Button.Ripple>\r\n              </Form>\r\n              {/* <p className='text-center mt-2'>\r\n              <span className='mr-25'>New on our platform?</span>\r\n              <Link to='/register'>\r\n                <span>Create an account</span>\r\n              </Link>\r\n            </p>\r\n            <div className='divider my-2'>\r\n              <div className='divider-text'>or</div>\r\n            </div>\r\n            <div className='auth-footer-btn d-flex justify-content-center'>\r\n              <Button.Ripple color='facebook'>\r\n                <Facebook size={14} />\r\n              </Button.Ripple>\r\n              <Button.Ripple color='twitter'>\r\n                <Twitter size={14} />\r\n              </Button.Ripple>\r\n              <Button.Ripple color='google'>\r\n                <Mail size={14} />\r\n              </Button.Ripple>\r\n              <Button.Ripple className='mr-0' color='github'>\r\n                <GitHub size={14} />\r\n              </Button.Ripple>\r\n            </div>\r\n          */}\r\n            </Col>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\nconst [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}