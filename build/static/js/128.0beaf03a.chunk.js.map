{"version":3,"sources":["views/apps/course/test/edit/CourseDocument.js","views/apps/course/test/edit/index.js","constants/validate.js","views/apps/product/store/action/index.js","views/apps/product/term/store/action/index.js","views/apps/course/test/store/action/index.js"],"names":["injectIntl","_ref","_errors$sort_order","_errors$contenttext","_errors$answer","selected","intl","product","useSelector","state","_state$products","products","data","store","quiz","history","useHistory","_useState","useState","_useState2","_slicedToArray","categoryData","setCategoryData","lang","common","language","_useState3","_useState4","editorState","setEditorState","dispatch","useDispatch","_useState5","_useState6","status","setStatus","_useState7","_useState8","publish","setPublish","_useState9","_useState10","disable","setDisable","_useState11","_useState12","section","setSection","_useState13","_useState14","changcate","id","useParams","_useState15","_useState16","_useState17","_useState18","changeSelectProduct","setChangeSelectProduct","_useState19","_useState20","changeSelectSection","setChangeSelectSection","EditQuizOptions","validateOptions","_useState21","_useState22","isSubmit","setIsSubmit","_useState23","EditorState","createEmpty","_useState24","Correct_answer","setCorrect_answer","_useForm","yup","productId","required","_jsx","FormattedMessage","curriculumSectionId","contenttext","answer","useForm","mode","register","errors","formState","handleSubmit","control","clearErrors","setError","getValues","setValue","_useState25","_useState26","optionProductValue","setOptionProductValue","_useState27","_useState28","optionSectionValue","setOptionSectionValue","_useState29","_useState30","valueContent","setValueContent","_useState31","_useState32","valueShortContent","setValueShortContent","useEffect","getsectionId","getSection","filter","skip","limit","order","_selected$product","_selected$product2","_selected$product2$pr","value","label","product_names","name","_store$sectionDetail","_store$sectionDetail2","_store$sectionDetail3","_store$sectionDetail4","_store$sectionDetail5","_store$sectionDetail6","sectionDetail","title","undefined","length","forEach","element","sections","scrollToTop","push","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","description","_store$sectionDetail7","_store$sectionDetail8","wrap","_context","prev","next","validateEditor","classError","correct_answerError","draftToHtml","convertToRaw","getCurrentContent","updateQuiz","parseInt","_objectSpread","correct_answer","lectures_quizs","updateIsQuizSection","isQuiz","progress","stop","_x","apply","arguments","htmlToDraftUtil","check","descriptionError","_jsxs","Row","children","Col","sm","Media","className","body","Form","FormGroup","Label","for","Input","innerRef","sort_order","onBlur","document","getElementById","trim","classnames","defaultValue","message","type","Editor","stripPastedStyles","toolbar","options","inline","inDropdown","defaultEditorState","onEditorStateChange","toolbarClassName","wrapperClassName","editorClassName","classNames","Controller","render","_ref3","field","Select","placeholder","map","item","index","_item$product_names$","classNamePrefix","onChange","e","_ref4","target","formatMessage","style","textAlign","marginTop","Button","color","disabled","outline","onClick","goBack","CourseDocumentEdit","activeTab","setActiveTab","getQuiz","getDataProduct","product_type","key","Card","CardBody","Nav","pills","NavItem","NavLink","active","Book","size","TabContent","TabPane","tabId","CourseDocumentTab","Alert","AboutOptions","about","maxLength","PartnerOptions","DocumentOptions","validate","REGEX","TITLE","test","pattern","short_content","DiscountOptions","discount","min","time","PriceOptions","price","Document_Link_Options","document_link","CategoryOptions","code","minLength","message_content","BranchOptions","code_branch","email","EMAIL","phone","addpress","EditBranchOptions","Document_course","EditCategoryOptions","EditDocumentOptions","author","TermOptions","KindOptions","EditKindOptions","TranscriptOptions","score","EditTranscriptOptions","student_code","CertificateOptions","UserCertificateOptions","EditCertificateOptions","provider","position","ProductOptions","product_name","NAME2","alidate","SPACE","vat","max","number_trial","categoryId","service_price_local","PRICE","service_price_cloud","VersionOptions","version","infor","StaffOptions","last_name","NAME","first_name","username","USERNAME","password","EditStaffOptions","UserOptions","PASSWORD","EditUserOptions","CityOptions","CountryOptions","phone_code","PHONE_CODE","StudentOptions","date","CloudOptions","getData","params","Service","send","method","api","LIST_PRODUCT","path","then","response","_response$data","_response$data2","totalPages","total","getById","_callee2","_context2","GET_PRODUCT","query","catch","err","console","log","_x2","add","staff","_callee3","getState","_context3","CREATE_PRODUCT","_x3","_x4","update","_callee4","_context4","UPDATE_PRODUCT","_x5","_x6","remove","_ref5","_callee5","_context5","DELETE_PRODUCT","_x7","_x8","getCategory","_ref6","_callee6","_context6","LIST_CATEGORY","_response$data3","_response$data4","_x9","getInstractors","_ref7","_callee7","_context7","LIST_INSTRACTORS","_response$data5","_response$data6","_x10","getCategoryId","_ref9","_callee9","_context9","GET_CATEGORY","_x12","getCertificateId","_ref10","_callee10","_context10","GET_CERTIFICATEID","_x13","getListCategoryProduct","_ref14","_callee14","_context14","LIST_CATEGORY_PRODUCT","_response$data9","_response$data10","_x18","getCategoryProduct","categoryProductId","_ref15","_callee15","_context15","GET_CATEGORY_PRODUCT","_x19","LIST_PRODUCT_TERM","GET_TERM","CREATE_PRODUCT_TERM","UPDATE_PRODUCT_TERM","DELETE_PRODUCT_TERM","getDetail","LIST_QUIZ","getDataExport","LIST_SECTION","GET_section","GET_QUIZ","addQuiz","Document","CREATE_QUIZ","Category","_ref8","_callee8","_context8","UPDATE_QUIZ"],"mappings":"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","file":"static/js/128.0beaf03a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\n\r\nimport \"react-phone-number-input/style.css\";\r\n\r\nimport { isObjEmpty, scrollToTop } from \"@utils\";\r\n\r\nimport classnames from \"classnames\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Media,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport validateOptions from \"@constants/validate\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { convertToRaw, EditorState } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { htmlToDraftUtil } from \"@utils\";\r\nimport Select from \"react-select\";\r\nimport {} from \"react-scroll-up\";\r\nimport { getSection, getsectionId, updateQuiz } from \"../store/action\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport { validateEditor } from \"../../../../../helper/common\";\r\nimport classNames from \"classnames\";\r\nimport { update as updateIsQuizSection } from \"../../../product/term/store/action\";\r\n\r\nconst CourseDocumentTab = ({ selected, intl }) => {\r\n  const product = useSelector((state) => state?.products?.data);\r\n  const store = useSelector((state) => state.quiz);\r\n  const history = useHistory();\r\n  const [categoryData, setCategoryData] = useState(null);\r\n  const lang = useSelector((state) => state.common.language);\r\n  const [editorState, setEditorState] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const [status, setStatus] = useState(null);\r\n  const [publish, setPublish] = useState(null);\r\n  const [disable, setDisable] = useState(false);\r\n  const [section, setSection] = useState([]);\r\n  const [changcate, setChangcate] = useState();\r\n  const { id } = useParams();\r\n  const [changeSelect, setChangeSelect] = useState(changcate);\r\n  const [changeSelectProduct, setChangeSelectProduct] = useState();\r\n  const [changeSelectSection, setChangeSelectSection] = useState();\r\n\r\n  const EditQuizOptions = validateOptions.EditQuizOptions;\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n  const [Correct_answer, setCorrect_answer] = useState(\r\n    EditorState.createEmpty()\r\n  );\r\n\r\n  const document_course = yup.object({\r\n    productId: yup\r\n      .number()\r\n      .required(\r\n        <FormattedMessage id=\"The course field is requiredis required\" />\r\n      ),\r\n    curriculumSectionId: yup\r\n      .number()\r\n      .required(<FormattedMessage id=\"The term field is required\" />),\r\n    contenttext: yup\r\n      .string()\r\n      .required(<FormattedMessage id=\"Question field is required\" />),\r\n    answer: yup\r\n      .string()\r\n      .required(<FormattedMessage id=\"The answer field is required\" />),\r\n  });\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    control,\r\n    setError,\r\n    getValues,\r\n    clearErrors,\r\n    setValue,\r\n  } = useForm({\r\n    // resolver: yupResolver(document_course),\r\n    mode: \"all\",\r\n  });\r\n\r\n  const [optionProductValue, setOptionProductValue] = useState(null);\r\n\r\n  const [optionSectionValue, setOptionSectionValue] = useState(null);\r\n\r\n  const [valueContent, setValueContent] = useState(\"\");\r\n\r\n  const [valueShortContent, setValueShortContent] = useState(\r\n    EditorState.createEmpty()\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getsectionId({\r\n        id: selected?.curriculumSectionId,\r\n      })\r\n    );\r\n  }, [dispatch, selected?.curriculumSectionId]);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getSection({\r\n        filter: {},\r\n        skip: 0,\r\n        limit: 20,\r\n        order: [],\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selected !== null ||\r\n      (selected !== null &&\r\n        categoryData !== null &&\r\n        selected.id !== categoryData.id)\r\n    ) {\r\n      setCategoryData(selected);\r\n      setValue(\"productId\", selected?.productId);\r\n      setValue(\"curriculumSectionId\", selected?.curriculumSectionId);\r\n\r\n      setOptionProductValue({\r\n        value: selected?.product?.id || 0,\r\n        label: selected?.product?.product_names[0]?.name || \"\",\r\n      });\r\n    }\r\n  }, [selected, categoryData]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selected !== null ||\r\n      (selected !== null &&\r\n        store?.sectionDetail?.id &&\r\n        store?.sectionDetail?.title)\r\n    ) {\r\n      if (\r\n        store?.sectionDetail?.id !== undefined &&\r\n        store?.sectionDetail?.title !== undefined\r\n      ) {\r\n        setOptionSectionValue({\r\n          value: store?.sectionDetail?.id,\r\n          label: store?.sectionDetail?.title,\r\n        });\r\n      }\r\n    }\r\n  }, [selected, store?.sectionDetail]);\r\n\r\n  useEffect(() => {\r\n    if (selected !== null || selected !== null) {\r\n      if (product?.length > 0) {\r\n        product?.forEach((element) => {\r\n          if (element?.id === optionProductValue?.value) {\r\n            setSection(element?.sections);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }, [selected, product?.length, optionProductValue?.value]);\r\n\r\n  useEffect(() => {\r\n    if (store.status === 200) {\r\n      scrollToTop();\r\n      history.push(\"/apps/course/test/list\");\r\n    }\r\n  }, [store.status, history]);\r\n\r\n  const onSubmit = async (values) => {\r\n    setIsSubmit(true);\r\n    if (validateEditor(valueContent)) {\r\n      setEditorState({\r\n        classError: \"invalid-editor is-invalid form-control\",\r\n        correct_answerError: (\r\n          <FormattedMessage id=\"The correct_answer is required\" />\r\n        ),\r\n      });\r\n    } else {\r\n      setEditorState(null);\r\n\r\n      const description =\r\n        (valueContent &&\r\n          draftToHtml(convertToRaw(valueShortContent?.getCurrentContent()))) ||\r\n        null;\r\n\r\n      // if (isObjEmpty(errors)) {\r\n      setDisable(true);\r\n      dispatch(\r\n        updateQuiz({\r\n          id: parseInt(id),\r\n          data: {\r\n            ...values,\r\n            status: parseInt(values.status),\r\n            publish: parseInt(values.publish),\r\n            description,\r\n            correct_answer: valueContent,\r\n            lang,\r\n          },\r\n        })\r\n      );\r\n\r\n      if (parseInt(values.status) === 1 && parseInt(values.publish) === 1) {\r\n        if (store?.sectionDetail?.lectures_quizs?.length < 2) {\r\n          dispatch(\r\n            updateIsQuizSection({\r\n              id: selected?.curriculumSectionId,\r\n              data: {\r\n                isQuiz: 0,\r\n                status: 1,\r\n                lang,\r\n                progress: 1,\r\n              },\r\n            })\r\n          );\r\n        }\r\n        dispatch(\r\n          updateIsQuizSection({\r\n            id: selected?.curriculumSectionId,\r\n            data: {\r\n              isQuiz: 1,\r\n              status: 1,\r\n              lang,\r\n              progress: 1,\r\n            },\r\n          })\r\n        );\r\n      }\r\n      // }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Correct_answer) {\r\n      const description =\r\n        Correct_answer &&\r\n        draftToHtml(convertToRaw(Correct_answer.getCurrentContent()));\r\n      setValueContent(description);\r\n    }\r\n  }, [Correct_answer]);\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      setCorrect_answer(htmlToDraftUtil(categoryData?.correct_answer || \" \"));\r\n      setValueShortContent(htmlToDraftUtil(categoryData?.description || \" \"));\r\n      setStatus(categoryData?.status);\r\n      setPublish(categoryData?.publish);\r\n    }\r\n  }, [categoryData]);\r\n\r\n  useEffect(() => {\r\n    if (isSubmit) {\r\n      const check = validateEditor(valueContent);\r\n      if (check === true) {\r\n        setEditorState({\r\n          classError: \"invalid-editor is-invalid form-control\",\r\n          descriptionError: (\r\n            <FormattedMessage id=\"The correct_answer is required\" />\r\n          ),\r\n        });\r\n      } else {\r\n        setEditorState({});\r\n      }\r\n    }\r\n  }, [valueContent, isSubmit]);\r\n\r\n  return (\r\n    <Row>\r\n      <Col sm=\"12\">\r\n        <Media className=\"mb-2\">\r\n          <Media className=\"mt-50\" body>\r\n            <h4>{selected.name} </h4>\r\n          </Media>\r\n        </Media>\r\n      </Col>\r\n      <Col sm=\"12\">\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <FormGroup>\r\n            <Label for=\"sort_order\">\r\n              <FormattedMessage id=\"sort_order\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"sort_order\"\r\n              id=\"sort_order\"\r\n              innerRef={register(EditQuizOptions.sort_order)}\r\n              onBlur={() => {\r\n                let sort_order = document.getElementById(\"sort_order\");\r\n                if (sort_order && sort_order.value) {\r\n                  sort_order.value = sort_order.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"sort_order\"] })}\r\n              defaultValue={categoryData && categoryData.sort_order}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.sort_order && errors.sort_order.message}\r\n            </small>\r\n            {errors?.sort_order?.type === \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid category name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"contenttext\">\r\n              <FormattedMessage id=\"question\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"contenttext\"\r\n              id=\"contenttext\"\r\n              innerRef={register(EditQuizOptions.contenttext)}\r\n              onBlur={() => {\r\n                let contenttext = document.getElementById(\"contenttext\");\r\n                if (contenttext && contenttext.value) {\r\n                  contenttext.value = contenttext.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"contenttext\"] })}\r\n              defaultValue={categoryData && categoryData.contenttext}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.contenttext && errors.contenttext.message}\r\n            </small>\r\n            {errors?.contenttext?.type === \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid category name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"answer\">\r\n              <FormattedMessage id=\"Right answer\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"answer\"\r\n              id=\"answer\"\r\n              innerRef={register(EditQuizOptions.answer)}\r\n              onBlur={() => {\r\n                let answer = document.getElementById(\"answer\");\r\n                if (answer && answer.value) {\r\n                  answer.value = answer.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"answer\"] })}\r\n              defaultValue={categoryData && categoryData.answer}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.answer && errors.answer.message}\r\n            </small>\r\n            {errors?.answer?.type === \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid category name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"correct_answer\">\r\n              <FormattedMessage id=\"Options\" />{\" \"}\r\n              <span className=\"text-danger\"></span>\r\n            </Label>\r\n\r\n            <Editor\r\n              stripPastedStyles={true}\r\n              toolbar={{\r\n                options: [\"inline\", \"textAlign\"],\r\n                inline: {\r\n                  inDropdown: false,\r\n                  options: [\"bold\", \"italic\", \"underline\"],\r\n                },\r\n              }}\r\n              defaultEditorState={Correct_answer}\r\n              editorState={Correct_answer}\r\n              onEditorStateChange={(data) => setCorrect_answer(data)}\r\n              toolbarClassName=\"toolbarClassName\"\r\n              wrapperClassName={\"wrapperClassName \" + editorState?.classError}\r\n              editorClassName=\"editorClassName \"\r\n              name=\"correct_answer\"\r\n              className={classNames({\r\n                \"is-invalid\": errors[\"correct_answer\"],\r\n              })}\r\n            />\r\n            {editorState && (\r\n              <small className=\"text-danger\">\r\n                {editorState.descriptionError}\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"description\">\r\n              <FormattedMessage id=\"description\" />{\" \"}\r\n              <span className=\"text-danger\"></span>\r\n            </Label>\r\n\r\n            <Editor\r\n              stripPastedStyles={true}\r\n              toolbar={{\r\n                options: [\"inline\", \"textAlign\"],\r\n                inline: {\r\n                  inDropdown: false,\r\n                  options: [\"bold\", \"italic\", \"underline\"],\r\n                },\r\n              }}\r\n              defaultEditorState={valueShortContent}\r\n              editorState={valueShortContent}\r\n              onEditorStateChange={(data) => setValueShortContent(data)}\r\n              name=\"description\"\r\n              // innerRef={register(Document_course.short_content)}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.description && errors.description.message}\r\n            </small>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label>\r\n              <FormattedMessage id=\"Course\" />\r\n              <span className=\"text-danger\"> * </span>\r\n            </Label>\r\n\r\n            {product?.length > 0 && optionProductValue && (\r\n              <Controller\r\n                control={control}\r\n                name=\"productId\"\r\n                render={({ field }) => {\r\n                  return (\r\n                    <Select\r\n                      id=\"productId\"\r\n                      innerRef={register}\r\n                      name=\"productId\"\r\n                      placeholder={<FormattedMessage id=\"Select Course\" />}\r\n                      className={classnames(\r\n                        \"react-select\",\r\n                        !changeSelectProduct\r\n                          ? {\r\n                              \"is-invalid\": errors[\"productId\"],\r\n                            }\r\n                          : \"\"\r\n                      )}\r\n                      defaultValue={optionProductValue}\r\n                      options={product?.map((item, index) => {\r\n                        return {\r\n                          value: item?.id,\r\n                          label: item?.product_names[0]?.name || \"\",\r\n                          section: item?.sections || [],\r\n                        };\r\n                      })}\r\n                      classNamePrefix=\"select\"\r\n                      {...field}\r\n                      onChange={(e) => {\r\n                        clearErrors(\"productId\");\r\n                        setValue(\"productId\", e?.value);\r\n                        setChangeSelectProduct(e?.value);\r\n                        setOptionProductValue(e);\r\n\r\n                        setValue(\"curriculumSectionId\", undefined);\r\n                        setChangeSelectSection(null);\r\n                        setOptionSectionValue(undefined);\r\n                      }}\r\n                    />\r\n                  );\r\n                }}\r\n              ></Controller>\r\n            )}\r\n\r\n            <small className=\"text-danger\">\r\n              {errors?.productId && errors.productId.message}\r\n            </small>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label>\r\n              <FormattedMessage id=\"term\" />\r\n              <span className=\"text-danger\"> * </span>\r\n            </Label>\r\n            {section?.length > 0 && optionSectionValue !== null && (\r\n              <Controller\r\n                control={control}\r\n                name=\"curriculumSectionId\"\r\n                render={({ field }) => {\r\n                  return (\r\n                    <Select\r\n                      id=\"curriculumSectionId\"\r\n                      innerRef={register}\r\n                      name=\"curriculumSectionId\"\r\n                      placeholder={<FormattedMessage id=\"Select...\" />}\r\n                      className={classnames(\r\n                        \"react-select\",\r\n                        !changeSelectSection\r\n                          ? {\r\n                              \"is-invalid\": errors[\"curriculumSectionId\"],\r\n                            }\r\n                          : \"\"\r\n                      )}\r\n                      defaultValue={optionSectionValue}\r\n                      options={section?.map((item, index) => {\r\n                        return {\r\n                          value: item?.id,\r\n                          label: item?.title,\r\n                        };\r\n                      })}\r\n                      classNamePrefix=\"select\"\r\n                      {...field}\r\n                      onChange={(e) => {\r\n                        clearErrors(\"productId\");\r\n                        clearErrors(\"curriculumSectionId\");\r\n\r\n                        // setError(\"curriculumSectionId\", \"\");\r\n                        setValue(\"curriculumSectionId\", e?.value);\r\n                        setChangeSelectSection(e?.value);\r\n                        setOptionSectionValue(e);\r\n                      }}\r\n                    />\r\n                  );\r\n                }}\r\n              ></Controller>\r\n            )}\r\n\r\n            {/* <Select\r\n              isClearable={false}\r\n              onChange={(e) => {\r\n                setError(\"curriculumSectionId\", \"\");\r\n                setValue(\"curriculumSectionId\", e?.value);\r\n                setChangeSelectProduct(e?.value);\r\n                setOptionProductValue(e);\r\n                // changeCate()\r\n                // setSection(e?.section);\r\n              }}\r\n              innerRef={register({ required: true })}\r\n              name=\"curriculumSectionId\"\r\n              defaultValue={optionSectionValue}\r\n              placeholder={<FormattedMessage id=\"Select...\" />}\r\n              options={section?.map((item, index) => {\r\n                return {\r\n                  value: item?.id,\r\n                  label: item?.title,\r\n                };\r\n              })}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n            /> */}\r\n            <small className=\"text-danger\">\r\n              {errors?.curriculumSectionId &&\r\n                errors.curriculumSectionId.message}\r\n            </small>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"publish\">\r\n              <FormattedMessage id=\"publish\" />\r\n            </Label>\r\n\r\n            <Input\r\n              type=\"select\"\r\n              name=\"publish\"\r\n              value={publish}\r\n              onChange={(e) => setPublish(e.target.value)}\r\n              id=\"publish\"\r\n              innerRef={register({ required: true })}\r\n            >\r\n              <option value=\"1\">{intl.formatMessage({ id: \"Allow\" })}</option>\r\n              <option value=\"0\">\r\n                {intl.formatMessage({ id: \"Do not allow\" })}\r\n              </option>\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"status\">\r\n              <FormattedMessage id=\"Status\" />\r\n            </Label>\r\n\r\n            <Input\r\n              type=\"select\"\r\n              name=\"status\"\r\n              value={status}\r\n              onChange={(e) => setStatus(e.target.value)}\r\n              id=\"status\"\r\n              innerRef={register({ required: true })}\r\n            >\r\n              <option value=\"0\">{intl.formatMessage({ id: \"Blocked\" })}</option>\r\n              <option value=\"1\">{intl.formatMessage({ id: \"Active\" })}</option>\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <div style={{ textAlign: \"end\", marginTop: \"145px\" }}>\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"mr-1\"\r\n              color=\"primary\"\r\n              disabled={disable}\r\n            >\r\n              <FormattedMessage id=\"update\" />\r\n            </Button>\r\n            <Button\r\n              type=\"reset\"\r\n              color=\"secondary\"\r\n              outline\r\n              onClick={() => history.goBack()}\r\n            >\r\n              <FormattedMessage id=\"Cancel\" />\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default injectIntl(CourseDocumentTab);\r\n","import { useEffect, useState } from \"react\";\r\nimport { AlignJustify, Book } from \"react-feather\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Alert,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  TabContent,\r\n  TabPane,\r\n} from \"reactstrap\";\r\nimport { getQuiz } from \"../store/action\";\r\nimport CourseDocumentTab from \"./CourseDocument\";\r\nimport { getData as getDataProduct } from \"../../../product/store/action\";\r\n\r\nconst CourseDocumentEdit = () => {\r\n  const [activeTab, setActiveTab] = useState(\"1\"),\r\n    store = useSelector((state) => state.quiz),\r\n    dispatch = useDispatch(),\r\n    { id } = useParams();\r\n  const lang = useSelector((state) => state.common.language);\r\n\r\n  const toggle = (tab) => setActiveTab(tab);\r\n\r\n  useEffect(() => {\r\n    dispatch(getQuiz(parseInt(id)));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getDataProduct({\r\n        filter: {\r\n          status: 1,\r\n          lang: lang,\r\n          product_type: 0,\r\n        },\r\n        order: [\r\n          {\r\n            key: \"id\",\r\n            value: \"desc\",\r\n          },\r\n        ],\r\n      })\r\n    );\r\n  }, [lang]);\r\n\r\n  return store.selected !== null && store.selected !== undefined ? (\r\n    <Row className=\"app-user-edit\">\r\n      <Col sm=\"12\">\r\n        <Card>\r\n          <CardBody className=\"pt-2\">\r\n            <Nav pills>\r\n              <NavItem>\r\n                <NavLink active={activeTab === \"1\"} onClick={() => toggle(\"1\")}>\r\n                  <Book size={14} />\r\n                  <span className=\"align-middle d-none d-sm-block\">\r\n                    <FormattedMessage id=\"Test\" />\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <CourseDocumentTab selected={store.selected} store={store} />\r\n              </TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  ) : (\r\n    <Alert color=\"danger\">\r\n      <h4 className=\"alert-heading\">Not found</h4>\r\n    </Alert>\r\n  );\r\n};\r\nexport default CourseDocumentEdit;\r\n","import { FormattedMessage } from \"react-intl\";\r\nimport REGEX from \"./regex\";\r\nimport { number } from \"yup\";\r\nconst validateOptions = {\r\n  AboutOptions: {\r\n    about: {\r\n      // required: <FormattedMessage id=\"The about title field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"About title up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  PartnerOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DocumentOptions: {\r\n    label: {\r\n      required: <FormattedMessage id=\"the label field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Label up to 255 characters\" />,\r\n      },\r\n    },\r\n\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n\r\n    short_content: {\r\n      required: <FormattedMessage id=\"the short content field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DiscountOptions: {\r\n    discount: {\r\n      required: <FormattedMessage id=\"the discount field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"The discount is not suitable\" />,\r\n      },\r\n    },\r\n    time: {\r\n      required: <FormattedMessage id=\"The time price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  PriceOptions: {\r\n    price: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n    },\r\n  },\r\n  Document_Link_Options: {\r\n    document_link: {\r\n      required: (\r\n        <FormattedMessage id=\"The time document link field is required\" />\r\n      ),\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  CategoryOptions: {\r\n    code: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n\r\n    message_content: {\r\n      maxLength: {\r\n        value: 30,\r\n        message: <FormattedMessage id=\"Category must be 30 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  BranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n    // short_content: {\r\n    //   required: <FormattedMessage id=\"the short content field is required\" />,\r\n    //   validate: (value) => !REGEX.TITLE.test(value),\r\n    //   maxLength: {\r\n    //     value: 255,\r\n\r\n    //     message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n    //   },\r\n    // },\r\n    // content: {\r\n    //   required: <FormattedMessage id=\"the content field is required\" />,\r\n    //   maxLength: {\r\n    //     value: 3000,\r\n    //     message: <FormattedMessage id=\"Content up to 3000 characters\" />,\r\n    //   },\r\n    // },\r\n  },\r\n\r\n  EditBranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n  },\r\n\r\n  Document_course: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditCategoryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n      // pattern: {\r\n      //   value: REGEX.NAME2,\r\n      //   message: <FormattedMessage id=\"Invalid category name\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditDocumentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    author: {\r\n      required: <FormattedMessage id=\"The Author name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Author name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Author must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  EditQuizOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    contenttext: {\r\n      required: <FormattedMessage id=\"The content field is required\" />,\r\n    },\r\n    answer: {\r\n      required: <FormattedMessage id=\"The answer field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  TermOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    //Học phần\r\n  },\r\n  KindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditKindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  TranscriptOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditTranscriptOptions: {\r\n    student_code: {\r\n      required: <FormattedMessage id=\"The student code field is required\" />,\r\n    },\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  CertificateOptions: {},\r\n  UserCertificateOptions: {},\r\n\r\n  EditCertificateOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"The title must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"The title must be 70 characters max\" />,\r\n      },\r\n    },\r\n    provider: {\r\n      required: <FormattedMessage id=\"Provider field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Provider must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Provider must be 70 characters max\" />,\r\n      },\r\n    },\r\n    position: {\r\n      required: <FormattedMessage id=\"Position field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Position must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Position must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  ProductOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The product's name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Product name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Product name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    vat: {\r\n      required: <FormattedMessage id=\"The VAT field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"VAT more than 0\" />,\r\n      },\r\n      max: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"VAT less than 100\" />,\r\n      },\r\n    },\r\n    number_trial: {\r\n      // required: <FormattedMessage id=\"The Number day field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be greater than or equal to 0\" />\r\n        ),\r\n      },\r\n      max: {\r\n        value: 30,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be less than or equal to 30\" />\r\n        ),\r\n      },\r\n      validate: (value) =>\r\n        value >= 0 || (\r\n          <FormattedMessage id=\"Number day must be a positive number\" />\r\n        ),\r\n    },\r\n    categoryId: {\r\n      required: <FormattedMessage id=\"The category field is required\" />,\r\n      min: {\r\n        value: 0,\r\n      },\r\n    },\r\n    service_price_local: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n\r\n    service_price_cloud: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n  },\r\n  VersionOptions: {\r\n    version: {\r\n      required: <FormattedMessage id=\"The version field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Version up to 255 characters\" />,\r\n      },\r\n    },\r\n    infor: {\r\n      maxLength: {\r\n        value: 500,\r\n        message: <FormattedMessage id=\"Information up to 500 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  StaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditStaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  UserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|\\\\d)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditUserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  CityOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The city name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The city code field is required\" />,\r\n      alidate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n  },\r\n  CountryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The country name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The country code field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    phone_code: {\r\n      required: <FormattedMessage id=\"The phone code field is required\" />,\r\n      validate: (value) => REGEX.PHONE_CODE.test(value),\r\n    },\r\n  },\r\n  StudentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    date: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    },\r\n    // gender: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // courseId: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // formality: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n  },\r\n\r\n  CloudOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The cloud name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Cloud name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Cloud name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    // vat: {\r\n    //   required: <FormattedMessage id=\"The VAT field is required\" />,\r\n    //   min: {\r\n    //     value: 0,\r\n    //     message: <FormattedMessage id=\"VAT more than 0\" />,\r\n    //   },\r\n    //   max: {\r\n    //     value: 100,\r\n    //     message: <FormattedMessage id=\"VAT less than 100\" />,\r\n    //   },\r\n    // },\r\n  },\r\n};\r\nexport default validateOptions;\r\n","import api from \"../../../../../constants/api\";\r\nimport Service from \"../../../../../services/request\";\r\n\r\nexport const getData = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_PRODUCT.method,\r\n      path: api.LIST_PRODUCT.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_PRODUCT\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getById = (data) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_PRODUCT.method,\r\n      path: api.GET_PRODUCT.path,\r\n      query: data,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_PRODUCT\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\nexport const add = (staff) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.CREATE_PRODUCT.method,\r\n      path: api.CREATE_PRODUCT.path,\r\n      data: staff,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"ADD_PRODUCT\",\r\n          response,\r\n        });\r\n      })\r\n\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"ADD_PRODUCT\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const update = (data) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.UPDATE_PRODUCT.method,\r\n      path: api.UPDATE_PRODUCT.path,\r\n      data,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_PRODUCT\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_PRODUCT\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const remove = (data) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.DELETE_PRODUCT.method,\r\n      path: api.DELETE_PRODUCT.path,\r\n      data,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"DELETE_PRODUCT\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const getCategory = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_CATEGORY.method,\r\n      path: api.LIST_CATEGORY.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_CATEGORY\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getInstractors = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_INSTRACTORS.method,\r\n      path: api.LIST_INSTRACTORS.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_INSTRACTORS\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\nexport const getCertifycate = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_CERTIFYCATE.method,\r\n      path: api.LIST_CERTIFYCATE.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_CERTIFYCATE\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\nexport const getCategoryId = (categoryId) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_CATEGORY.method,\r\n      path: api.GET_CATEGORY.path,\r\n      query: { id: categoryId },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_CATEGORY\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const getCertificateId = (categoryId) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_CERTIFICATEID.method,\r\n      path: api.GET_CERTIFICATEID.path,\r\n      query: { id: categoryId },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_CERTIFICATEID\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\n//\r\nexport const getTerm = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_PRODUCT_TERM.method,\r\n      path: api.LIST_PRODUCT_TERM.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_TERM_PRODUCT\",\r\n        data: response?.data,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\nexport const getTermId = (termId) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_TERM.method,\r\n      path: api.GET_TERM.path,\r\n      query: { id: termId },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_TERM_PRODUCT\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\n//\r\nexport const updateCategory = (Category) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.UPDATE_CATEGORY.method,\r\n      path: api.UPDATE_CATEGORY.path,\r\n      data: Category,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_CATEGORY\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_CATEGORY\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\n\r\n//cate product\r\nexport const getListCategoryProduct = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_CATEGORY_PRODUCT.method,\r\n      path: api.LIST_CATEGORY_PRODUCT.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_CATEGORY_PRODUCT\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\nexport const getCategoryProduct = (categoryProductId) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_CATEGORY_PRODUCT.method,\r\n      path: api.GET_CATEGORY_PRODUCT.path,\r\n      query: { id: categoryProductId },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_CATEGORY_PRODUCT\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const updateCategoryProduct = (CategoryProduct) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.UPDATE_CATEGORY_PRODUCT.method,\r\n      path: api.UPDATE_CATEGORY_PRODUCT.path,\r\n      data: CategoryProduct,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_CATEGORY_PRODUCT\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_CATEGORY_PRODUCT\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\n","import api from \"../../../../../../constants/api\";\r\nimport Service from \"../../../../../../services/request\";\r\n\r\nexport const getData = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_PRODUCT_TERM.method,\r\n      path: api.LIST_PRODUCT_TERM.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_TERM_PRODUCT\",\r\n        data: response?.data,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getById = (data) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_TERM.method,\r\n      path: api.GET_TERM.path,\r\n      query: data,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_TERM_PRODUCT\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\nexport const add = (staff) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.CREATE_PRODUCT_TERM.method,\r\n      path: api.CREATE_PRODUCT_TERM.path,\r\n      data: staff,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"ADD_TERM_PRODUCT\",\r\n          response,\r\n        });\r\n      })\r\n\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"ADD_TERM_PRODUCT\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const update = (staff) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.UPDATE_PRODUCT_TERM.method,\r\n      path: api.UPDATE_PRODUCT_TERM.path,\r\n      data: staff,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_TERM_PRODUCT\",\r\n          response,\r\n        });\r\n      })\r\n\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_TERM_PRODUCT\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const remove = (id) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.DELETE_PRODUCT_TERM.method,\r\n      path: api.DELETE_PRODUCT_TERM.path,\r\n      query: id,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"DELETE_TERM_PRODUCT\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const getDetail = (data) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_PRODUCT.method,\r\n      path: api.GET_PRODUCT.path,\r\n      query: data,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_PRODUCT\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n","import api from \"../../../../../../constants/api\";\r\nimport Service from \"../../../../../../services/request\";\r\n\r\nexport const getData = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_QUIZ.method,\r\n      path: api.LIST_QUIZ.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_QUIZ\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getDataExport = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_QUIZ.method,\r\n      path: api.LIST_QUIZ.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_EXPORT_QUIZ\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getSection = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_SECTION.method,\r\n      path: api.LIST_SECTION.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_SECTION\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\nexport const getsectionId = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_section.method,\r\n      path: api.GET_section.path,\r\n      query: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_section_DETAIL\",\r\n        selected: response?.data,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getQuiz = (id) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_QUIZ.method,\r\n      path: api.GET_QUIZ.path,\r\n      query: { id },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_QUIZ\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const getKindId = (categoryId) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_KIND.method,\r\n      path: api.GET_KIND.path,\r\n      query: { id: categoryId },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_KindId\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const addQuiz = (Document) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.CREATE_QUIZ.method,\r\n      path: api.CREATE_QUIZ.path,\r\n      data: Document,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"ADD_QUIZ\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"ADD_QUIZ\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const updateQuiz = (Category) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.UPDATE_QUIZ.method,\r\n      path: api.UPDATE_QUIZ.path,\r\n      data: Category,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_QUIZ\",\r\n          response,\r\n        });\r\n      })\r\n\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_DOCUMENT_COURSE\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\n"],"sourceRoot":""}