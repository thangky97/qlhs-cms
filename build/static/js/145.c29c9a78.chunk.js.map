{"version":3,"sources":["views/apps/notification/edit/Notification.js","views/apps/notification/edit/index.js","constants/validate.js","views/apps/notification/store/action/index.js"],"names":["injectIntl","_ref","_selected$product","_selected$product$pro","_Object$keys","_selected$user","_selected$user2","selected","store","intl","useSelector","state","notification","_useForm","useForm","register","errors","handleSubmit","history","useHistory","_useState","common","language","useState","_useState2","_slicedToArray","editorState","setEditorState","dispatch","useDispatch","_useState3","_useState4","setStatus","_useState5","_useState6","disable","setDisable","_useState7","_useState8","isSubmit","setIsSubmit","_useState9","_useState10","valueContent","setValueContent","_useState11","useParams","id","EditorState","createEmpty","_useState12","valueDescription","setValueDescription","useEffect","status","scrollToTop","push","description","draftToHtml","convertToRaw","getCurrentContent","check","validateEditor","classError","descriptionError","_jsx","FormattedMessage","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","correct_answerError","updateNotification","code","data","message_content","stop","_x","apply","arguments","Object","keys","htmlToDraftUtil","_jsxs","Row","children","Col","sm","Media","className","body","name","Form","FormGroup","Label","for","Input","readOnly","defaultValue","product","product_names","message_type","user","length","first_name","last_name","Editor","toolbar","options","inline","inDropdown","stripPastedStyles","onEditorStateChange","toolbarClassName","wrapperClassName","editorClassName","innerRef","classNames","style","textAlign","marginTop","Button","type","color","disabled","outline","onClick","goBack","NotificationEdit","activeTab","setActiveTab","getNotification","parseInt","undefined","Card","CardBody","Nav","pills","NavItem","NavLink","active","Bell","size","TabContent","TabPane","tabId","NotificationTab","Alert","validateOptions","AboutOptions","about","maxLength","value","message","PartnerOptions","required","DocumentOptions","label","validate","REGEX","TITLE","test","sort_order","pattern","short_content","DiscountOptions","discount","min","time","PriceOptions","price","Document_Link_Options","document_link","CategoryOptions","minLength","BranchOptions","code_branch","email","EMAIL","phone","addpress","EditBranchOptions","Document_course","EditCategoryOptions","EditDocumentOptions","author","EditQuizOptions","title","contenttext","answer","TermOptions","KindOptions","EditKindOptions","TranscriptOptions","score","EditTranscriptOptions","student_code","CertificateOptions","UserCertificateOptions","EditCertificateOptions","provider","position","ProductOptions","product_name","NAME2","alidate","SPACE","vat","max","number_trial","categoryId","service_price_local","PRICE","service_price_cloud","VersionOptions","version","infor","StaffOptions","NAME","username","USERNAME","password","EditStaffOptions","UserOptions","PASSWORD","trim","EditUserOptions","CityOptions","CountryOptions","phone_code","PHONE_CODE","StudentOptions","date","CloudOptions","getData","params","Service","send","method","api","LIST_NOTIFICATION","path","then","response","_response$data","_response$data2","totalPages","total","remove","_callee2","_context2","DELETE_NOTIFICATION","query","catch","err","console","log","_x2","getDataExport","_ref3","_callee3","_context3","_response$data3","_response$data4","_x3","getDataUser","_ref4","_callee4","_context4","LIST_USER_PRODUCTS","_response$data5","_response$data6","_x4","_ref5","_callee5","_context5","GET_NOTIFICATION","_x5","addNotification","Notification","_ref7","_callee8","getState","promiseNotification","_context8","map","_ref8","_callee7","element","_context7","CREATE_NOTIFICATION","_objectSpread","usersId","_x9","Promise","all","statusCode","_x7","_x8","_ref9","_callee9","_context9","UPDATE_NOTIFICATION","_x10","_x11"],"mappings":"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","file":"static/js/145.c29c9a78.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\n\r\nimport \"react-phone-number-input/style.css\";\r\n\r\nimport { isObjEmpty, scrollToTop } from \"@utils\";\r\n\r\nimport classnames from \"classnames\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Media,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport validateOptions from \"../../../../constants/validate\";\r\nimport { updateNotification } from \"../store/action\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport { convertToRaw, EditorState } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { htmlToDraftUtil } from \"../../../../utility/Utils\";\r\nimport classNames from \"classnames\";\r\nimport Select from \"react-select\";\r\nimport {} from \"react-scroll-up\";\r\nimport { validateEditor } from \"../../../../helper/common\";\r\n\r\nconst NotificationTab = ({ selected, intl }) => {\r\n  const store = useSelector((state) => state.notification);\r\n  const { register, errors, handleSubmit } = useForm();\r\n  const history = useHistory();\r\n  const lang = useSelector((state) => state.common.language);\r\n  const [editorState, setEditorState] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const [status, setStatus] = useState(null);\r\n  const [disable, setDisable] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [valueContent, setValueContent] = useState(\"\");\r\n  const { id } = useParams();\r\n  const [valueDescription, setValueDescription] = useState(\r\n    EditorState.createEmpty()\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (store.status === 200) {\r\n      scrollToTop();\r\n      history.push(\"/apps/notification/list\");\r\n    }\r\n  }, [store.status, history]);\r\n  useEffect(() => {\r\n    if (valueDescription) {\r\n      const description =\r\n        valueDescription &&\r\n        draftToHtml(convertToRaw(valueDescription.getCurrentContent()));\r\n      setValueContent(description);\r\n    }\r\n  }, [valueDescription]);\r\n\r\n  useEffect(() => {\r\n    if (isSubmit) {\r\n      const check = validateEditor(valueContent);\r\n      if (check === true) {\r\n        setEditorState({\r\n          classError: \"invalid-editor is-invalid form-control\",\r\n          descriptionError: <FormattedMessage id=\"The content is required\" />,\r\n        });\r\n      } else {\r\n        setEditorState({});\r\n      }\r\n    }\r\n  }, [valueContent, isSubmit]);\r\n\r\n  const onSubmit = async (values) => {\r\n    setIsSubmit(true);\r\n    if (validateEditor(valueContent)) {\r\n      setEditorState({\r\n        classError: \"invalid-editor is-invalid form-control\",\r\n        correct_answerError: <FormattedMessage id=\"The content is required\" />,\r\n      });\r\n    } else {\r\n      const description = draftToHtml(\r\n        convertToRaw(valueDescription.getCurrentContent())\r\n      );\r\n\r\n      // if (isObjEmpty(errors)) {\r\n      setDisable(true);\r\n      dispatch(\r\n        updateNotification({\r\n          code: selected?.code,\r\n          data: {\r\n            message_content: description,\r\n          },\r\n        })\r\n      );\r\n    }\r\n\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(selected)) {\r\n      setStatus(selected.status);\r\n      setValueDescription(htmlToDraftUtil(selected?.message_content || \" \"));\r\n    }\r\n  }, [selected]);\r\n  return (\r\n    <Row>\r\n      <Col sm=\"12\">\r\n        <Media className=\"mb-2\">\r\n          <Media className=\"mt-50\" body>\r\n            <h4>{selected.name} </h4>\r\n          </Media>\r\n        </Media>\r\n      </Col>\r\n      <Col sm=\"12\">\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <FormGroup>\r\n            <Label for=\"name\">\r\n              <FormattedMessage id=\"code_notification\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"code\"\r\n              id=\"code\"\r\n              readOnly\r\n              defaultValue={selected && selected.code}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"product\">\r\n              <FormattedMessage id=\"Course\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"product\"\r\n              id=\"product\"\r\n              readOnly\r\n              defaultValue={\r\n                (selected && selected?.product?.product_names[0]?.name) || \"\"\r\n              }\r\n            />\r\n          </FormGroup>\r\n\r\n          {selected?.message_type === 0 &&\r\n            Object.keys(selected?.user || {})?.length > 0 && (\r\n              <FormGroup>\r\n                <Label for=\"user\">\r\n                  <FormattedMessage id=\"User\" />{\" \"}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Input\r\n                  name=\"user\"\r\n                  id=\"user\"\r\n                  readOnly\r\n                  defaultValue={\r\n                    (selected &&\r\n                      selected?.user?.first_name +\r\n                        \" \" +\r\n                        selected?.user?.last_name) ||\r\n                    \"\"\r\n                  }\r\n                />\r\n              </FormGroup>\r\n            )}\r\n\r\n          <FormGroup>\r\n            <Label for=\"description\">\r\n              <FormattedMessage id=\"message_content\" />{\" \"}\r\n            </Label>\r\n\r\n            <Editor\r\n              toolbar={{\r\n                options: [\"inline\", \"textAlign\"],\r\n                inline: {\r\n                  inDropdown: false,\r\n                  options: [\"bold\", \"italic\", \"underline\"],\r\n                },\r\n              }}\r\n              stripPastedStyles={true}\r\n              editorState={valueDescription}\r\n              onEditorStateChange={(data) => setValueDescription(data)}\r\n              toolbarClassName=\"toolbarClassName\"\r\n              wrapperClassName={\"wrapperClassName \" + editorState?.classError}\r\n              editorClassName=\"editorClassName \"\r\n              name=\"description\"\r\n              innerRef={register}\r\n              className={classNames({\r\n                \"is-invalid\": errors[\"description\"],\r\n              })}\r\n            />\r\n            {editorState && (\r\n              <small className=\"text-danger\">\r\n                {editorState.descriptionError}\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          <div style={{ textAlign: \"end\", marginTop: \"145px\" }}>\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"mr-1\"\r\n              color=\"primary\"\r\n              disabled={disable}\r\n            >\r\n              <FormattedMessage id=\"update\" />\r\n            </Button>\r\n            <Button\r\n              type=\"reset\"\r\n              color=\"secondary\"\r\n              outline\r\n              onClick={() => history.goBack()}\r\n            >\r\n              <FormattedMessage id=\"Cancel\" />\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default injectIntl(NotificationTab);\r\n","import { useEffect, useState } from \"react\";\r\nimport { Archive, Bell, ChevronDown } from \"react-feather\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Alert,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  TabContent,\r\n  TabPane,\r\n} from \"reactstrap\";\r\nimport { getNotification } from \"../store/action\";\r\nimport NotificationTab from \"./Notification\";\r\n\r\nconst NotificationEdit = () => {\r\n  const [activeTab, setActiveTab] = useState(\"1\"),\r\n    store = useSelector((state) => state.notification),\r\n    dispatch = useDispatch(),\r\n    { id } = useParams();\r\n\r\n  const toggle = (tab) => setActiveTab(tab);\r\n\r\n  useEffect(() => {\r\n    dispatch(getNotification(parseInt(id)));\r\n  }, [dispatch]);\r\n\r\n  return store.selected !== null && store.selected !== undefined ? (\r\n    <Row className=\"app-user-edit\">\r\n      <Col sm=\"12\">\r\n        <Card>\r\n          <CardBody className=\"pt-2\">\r\n            <Nav pills>\r\n              <NavItem>\r\n                <NavLink active={activeTab === \"1\"} onClick={() => toggle(\"1\")}>\r\n                  <Bell size={14} />\r\n                  <span className=\"align-middle d-none d-sm-block\">\r\n                    <FormattedMessage id=\"Notification\" />\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <NotificationTab selected={store.selected} store={store} />\r\n              </TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  ) : (\r\n    <Alert color=\"danger\">\r\n      <h4 className=\"alert-heading\">Not found</h4>\r\n    </Alert>\r\n  );\r\n};\r\nexport default NotificationEdit;\r\n","import { FormattedMessage } from \"react-intl\";\r\nimport REGEX from \"./regex\";\r\nimport { number } from \"yup\";\r\nconst validateOptions = {\r\n  AboutOptions: {\r\n    about: {\r\n      // required: <FormattedMessage id=\"The about title field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"About title up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  PartnerOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DocumentOptions: {\r\n    label: {\r\n      required: <FormattedMessage id=\"the label field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Label up to 255 characters\" />,\r\n      },\r\n    },\r\n\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n\r\n    short_content: {\r\n      required: <FormattedMessage id=\"the short content field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DiscountOptions: {\r\n    discount: {\r\n      required: <FormattedMessage id=\"the discount field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"The discount is not suitable\" />,\r\n      },\r\n    },\r\n    time: {\r\n      required: <FormattedMessage id=\"The time price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  PriceOptions: {\r\n    price: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n    },\r\n  },\r\n  Document_Link_Options: {\r\n    document_link: {\r\n      required: (\r\n        <FormattedMessage id=\"The time document link field is required\" />\r\n      ),\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  CategoryOptions: {\r\n    code: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n\r\n    message_content: {\r\n      maxLength: {\r\n        value: 30,\r\n        message: <FormattedMessage id=\"Category must be 30 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  BranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n    // short_content: {\r\n    //   required: <FormattedMessage id=\"the short content field is required\" />,\r\n    //   validate: (value) => !REGEX.TITLE.test(value),\r\n    //   maxLength: {\r\n    //     value: 255,\r\n\r\n    //     message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n    //   },\r\n    // },\r\n    // content: {\r\n    //   required: <FormattedMessage id=\"the content field is required\" />,\r\n    //   maxLength: {\r\n    //     value: 3000,\r\n    //     message: <FormattedMessage id=\"Content up to 3000 characters\" />,\r\n    //   },\r\n    // },\r\n  },\r\n\r\n  EditBranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n  },\r\n\r\n  Document_course: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditCategoryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n      // pattern: {\r\n      //   value: REGEX.NAME2,\r\n      //   message: <FormattedMessage id=\"Invalid category name\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditDocumentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    author: {\r\n      required: <FormattedMessage id=\"The Author name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Author name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Author must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  EditQuizOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    contenttext: {\r\n      required: <FormattedMessage id=\"The content field is required\" />,\r\n    },\r\n    answer: {\r\n      required: <FormattedMessage id=\"The answer field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  TermOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    //Học phần\r\n  },\r\n  KindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditKindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  TranscriptOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditTranscriptOptions: {\r\n    student_code: {\r\n      required: <FormattedMessage id=\"The student code field is required\" />,\r\n    },\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  CertificateOptions: {},\r\n  UserCertificateOptions: {},\r\n\r\n  EditCertificateOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"The title must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"The title must be 70 characters max\" />,\r\n      },\r\n    },\r\n    provider: {\r\n      required: <FormattedMessage id=\"Provider field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Provider must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Provider must be 70 characters max\" />,\r\n      },\r\n    },\r\n    position: {\r\n      required: <FormattedMessage id=\"Position field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Position must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Position must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  ProductOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The product's name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Product name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Product name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    vat: {\r\n      required: <FormattedMessage id=\"The VAT field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"VAT more than 0\" />,\r\n      },\r\n      max: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"VAT less than 100\" />,\r\n      },\r\n    },\r\n    number_trial: {\r\n      // required: <FormattedMessage id=\"The Number day field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be greater than or equal to 0\" />\r\n        ),\r\n      },\r\n      max: {\r\n        value: 30,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be less than or equal to 30\" />\r\n        ),\r\n      },\r\n      validate: (value) =>\r\n        value >= 0 || (\r\n          <FormattedMessage id=\"Number day must be a positive number\" />\r\n        ),\r\n    },\r\n    categoryId: {\r\n      required: <FormattedMessage id=\"The category field is required\" />,\r\n      min: {\r\n        value: 0,\r\n      },\r\n    },\r\n    service_price_local: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n\r\n    service_price_cloud: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n  },\r\n  VersionOptions: {\r\n    version: {\r\n      required: <FormattedMessage id=\"The version field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Version up to 255 characters\" />,\r\n      },\r\n    },\r\n    infor: {\r\n      maxLength: {\r\n        value: 500,\r\n        message: <FormattedMessage id=\"Information up to 500 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  StaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditStaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  UserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|\\\\d)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditUserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  CityOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The city name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The city code field is required\" />,\r\n      alidate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n  },\r\n  CountryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The country name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The country code field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    phone_code: {\r\n      required: <FormattedMessage id=\"The phone code field is required\" />,\r\n      validate: (value) => REGEX.PHONE_CODE.test(value),\r\n    },\r\n  },\r\n  StudentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    date: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    },\r\n    // gender: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // courseId: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // formality: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n  },\r\n\r\n  CloudOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The cloud name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Cloud name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Cloud name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    // vat: {\r\n    //   required: <FormattedMessage id=\"The VAT field is required\" />,\r\n    //   min: {\r\n    //     value: 0,\r\n    //     message: <FormattedMessage id=\"VAT more than 0\" />,\r\n    //   },\r\n    //   max: {\r\n    //     value: 100,\r\n    //     message: <FormattedMessage id=\"VAT less than 100\" />,\r\n    //   },\r\n    // },\r\n  },\r\n};\r\nexport default validateOptions;\r\n","import api from \"../../../../../constants/api\";\r\nimport Service from \"../../../../../services/request\";\r\n\r\n// export const getData = (params) => {\r\n//   return async (dispatch) => {\r\n//     await Service.send({\r\n//       method: api.LIST_NOTIFICATION.method,\r\n//       path: api.LIST_NOTIFICATION.path,\r\n//       data: params,\r\n//     }).then((response) => {\r\n//       const dataUser = [];\r\n//       if (response?.data?.data?.length > 0) {\r\n//         const promiseUser = response?.data?.data.map(async (item, index) => {\r\n//           if (item?.selecteduerids) {\r\n//             await Service.send({\r\n//               method: api.LIST_USER.method,\r\n//               path: api.LIST_USER.path,\r\n//               query: { id: item?.selecteduerids },\r\n//             }).then((resUser) => {\r\n//               dataUser[index] = {\r\n//                 ...item,\r\n//                 user: resUser?.data,\r\n//               };\r\n//             });\r\n//           } else {\r\n//             dataUser[index] = {\r\n//               ...item,\r\n//               user: {},\r\n//             };\r\n//           }\r\n//         });\r\n//         Promise.all(promiseUser).then(() => {\r\n//           dispatch({\r\n//             type: \"GET_DATA_NOTIFICATION\",\r\n//             data: dataUser,\r\n//             totalPages: response?.data?.total,\r\n//             params,\r\n//           });\r\n//         });\r\n//       }\r\n//       dispatch({\r\n//         type: \"GET_DATA_NOTIFICATION\",\r\n//         data: response?.data?.data,\r\n//         totalPages: response?.data?.total,\r\n//         params,\r\n//       });\r\n//     });\r\n//   };\r\n// };\r\n\r\nexport const getData = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_NOTIFICATION.method,\r\n      path: api.LIST_NOTIFICATION.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_NOTIFICATION\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const remove = (id) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.DELETE_NOTIFICATION.method,\r\n      path: api.DELETE_NOTIFICATION.path,\r\n      query: id,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"DELETE_NOTIFICATION\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const getDataExport = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_NOTIFICATION.method,\r\n      path: api.LIST_NOTIFICATION.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_EXPORT_NOTIFICATION\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getDataUser = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_USER_PRODUCTS.method,\r\n      path: api.LIST_USER_PRODUCTS.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_USER\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getNotification = (id) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_NOTIFICATION.method,\r\n      path: api.GET_NOTIFICATION.path,\r\n      query: { id },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_NOTIFICATION\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const getUserId = (id) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_USER.method,\r\n      path: api.GET_USER.path,\r\n      query: { id },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_USER\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const addNotification = (user, Notification) => {\r\n  return async (dispatch, getState) => {\r\n    if (user?.length > 0) {\r\n      const promiseNotification = user.map(async (element) => {\r\n        await Service.send({\r\n          method: api.CREATE_NOTIFICATION.method,\r\n          path: api.CREATE_NOTIFICATION.path,\r\n          data: {\r\n            ...Notification,\r\n            usersId: element,\r\n          },\r\n        });\r\n      });\r\n      Promise.all(promiseNotification)\r\n        .then((response) => {\r\n          dispatch({\r\n            type: \"ADD_NOTIFICATION\",\r\n            response: {\r\n              statusCode: 200,\r\n            },\r\n          });\r\n        })\r\n        .catch((err) =>\r\n          dispatch({\r\n            type: \"ADD_NOTIFICATION\",\r\n            response: {\r\n              statusCode: 400,\r\n            },\r\n            err,\r\n          })\r\n        );\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateNotification = (Notification) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.UPDATE_NOTIFICATION.method,\r\n      path: api.UPDATE_NOTIFICATION.path,\r\n      data: Notification,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_NOTIFICATION\",\r\n          response,\r\n        });\r\n      })\r\n\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_NOTIFICATION\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\n"],"sourceRoot":""}