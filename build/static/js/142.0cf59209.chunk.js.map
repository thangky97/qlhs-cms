{"version":3,"sources":["views/apps/cms/branch/edit/Branch.js","views/apps/cms/branch/edit/index.js","constants/validate.js","views/apps/cms/branch/store/action/index.js"],"names":["injectIntl","_ref","_store$staffDetail","_store$staffDetail2","_errors$name","_errors$code_branch","_errors$addpress","_errors$email","_errors$phone","selected","intl","store","useSelector","state","branch","_useForm","useForm","register","errors","handleSubmit","control","setError","setValue","history","useHistory","_useState","useState","_useState2","_slicedToArray","BranchData","setBranchData","lang","common","language","dispatch","useDispatch","_useState3","_useState4","status","setStatus","_useState5","_useState6","disable","setDisable","data","staffs","id","useParams","_useState7","_useState8","EditBranchOptions","validateOptions","options","value","staffDetail","label","username","_useState9","_useState10","changcate","setChangcate","_useState11","EditorState","createEmpty","_useState12","valueContent","setValueContent","useEffect","htmlToDraftUtil","description","_useState13","_useState14","changeSelect","setChangeSelect","_store$err","err","statusCode","getStaffId","staffId","getStaff","filter","order","key","push","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","draftToHtml","convertToRaw","getCurrentContent","isObjEmpty","updateBranch","parseInt","_objectSpread","name","code_branch","addpress","phone","email","stop","_x","apply","arguments","_jsxs","Row","children","_jsx","Col","sm","Media","className","body","Form","FormGroup","Label","for","FormattedMessage","Input","innerRef","onBlur","document","getElementById","trim","classnames","defaultValue","message","type","Editor","stripPastedStyles","editorState","onEditorStateChange","Select","isClearable","onChange","e","changeCate","required","placeholder","map","item","index","first_name","last_name","classNamePrefix","target","formatMessage","style","textAlign","Button","color","disabled","outline","onClick","goBack","BranchEdit","activeTab","setActiveTab","getBranch","undefined","Card","CardBody","Nav","pills","NavItem","NavLink","active","GitBranch","size","TabContent","TabPane","tabId","BranchTab","Alert","AboutOptions","about","maxLength","PartnerOptions","DocumentOptions","validate","REGEX","TITLE","test","sort_order","pattern","short_content","DiscountOptions","discount","min","time","PriceOptions","price","Document_Link_Options","document_link","CategoryOptions","code","minLength","message_content","BranchOptions","EMAIL","Document_course","EditCategoryOptions","EditDocumentOptions","author","EditQuizOptions","title","contenttext","answer","TermOptions","KindOptions","EditKindOptions","TranscriptOptions","score","EditTranscriptOptions","student_code","CertificateOptions","UserCertificateOptions","EditCertificateOptions","provider","position","ProductOptions","product_name","NAME2","alidate","SPACE","vat","max","number_trial","categoryId","service_price_local","PRICE","service_price_cloud","VersionOptions","version","infor","StaffOptions","NAME","USERNAME","password","EditStaffOptions","UserOptions","PASSWORD","EditUserOptions","CityOptions","CountryOptions","phone_code","PHONE_CODE","StudentOptions","date","CloudOptions","getData","params","_callee2","_context2","Service","send","method","api","LIST_BRANCH","path","then","response","_response$data","_response$data$data","_response$data4","_response$data5","dataStaff","length","_response$data2","promiseStaff","GET_STAFF","query","resStaff","staff","_x2","_x3","Promise","all","_response$data3","totalPages","total","getDataExport","_ref3","_callee4","_context4","_response$data6","_response$data6$data","_response$data8","_response$data7","_ref4","_callee3","_context3","_x5","_x6","_x4","_ref5","_callee5","_context5","LIST_STAFF","_response$data9","_response$data10","_x7","_ref6","_callee6","_context6","catch","console","log","_x8","_ref7","_callee7","_context7","GET_BRANCH","_x9","addBranch","Branch","_ref8","_callee8","getState","_context8","CREATE_BRANCH","_x10","_x11","_ref9","_callee9","_context9","UPDATE_BRANCH","_x12","_x13"],"mappings":"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","file":"static/js/142.0cf59209.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\n\r\nimport \"react-phone-number-input/style.css\";\r\n\r\nimport { isObjEmpty } from \"@utils\";\r\n\r\nimport classnames from \"classnames\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Media,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport validateOptions from \"@constants/validate\";\r\nimport { getStaff, updateBranch, getStaffId } from \"../store/action\";\r\nimport classNames from \"classnames\";\r\nimport Select from \"react-select\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport { convertToRaw, EditorState } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { htmlToDraftUtil } from \"@utils\";\r\n\r\nconst BranchTab = ({ selected, intl }) => {\r\n  const store = useSelector((state) => state.branch);\r\n  const { register, errors, control, setError, setValue, handleSubmit } =\r\n    useForm();\r\n  const history = useHistory();\r\n  const [BranchData, setBranchData] = useState(null);\r\n  const lang = useSelector((state) => state.common.language);\r\n  const dispatch = useDispatch();\r\n  const [status, setStatus] = useState(null);\r\n  const [disable, setDisable] = useState(false);\r\n  const { data } = useSelector((state) => state.staffs);\r\n  const { id } = useParams();\r\n  const [selectStudent, setSelectStudent] = useState(null);\r\n  const EditBranchOptions = validateOptions.EditBranchOptions;\r\n\r\n  const options = {\r\n    value: store?.staffDetail?.id,\r\n    label: store?.staffDetail?.username,\r\n  };\r\n  const [changcate, setChangcate] = useState();\r\n  const [valueContent, setValueContent] = useState(EditorState.createEmpty());\r\n\r\n  useEffect(() => {\r\n    if (selected) {\r\n      setValueContent(htmlToDraftUtil(selected?.description || \" \"));\r\n    }\r\n  }, [selected]);\r\n  const [changeSelect, setChangeSelect] = useState(changcate);\r\n  const changeCate = (e) => {\r\n    setChangeSelect(e);\r\n  };\r\n  useEffect(() => {\r\n    if (store) {\r\n      setChangcate(options);\r\n    }\r\n  }, [store]);\r\n  useEffect(() => {\r\n    if (changcate) {\r\n      setChangeSelect(changcate);\r\n    }\r\n  }, [changcate]);\r\n\r\n  useEffect(() => {\r\n    if (store?.err?.statusCode) {\r\n      setDisable(false);\r\n    }\r\n  }, [store?.err]);\r\n  useEffect(() => {\r\n    dispatch(getStaffId(selected?.staffId));\r\n  }, [dispatch, selected?.staffId]);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getStaff({\r\n        filter: {\r\n          // status: filterStatus.value || undefined,\r\n          // name: searchName || undefined,\r\n          status: 1,\r\n          // lang,\r\n        },\r\n        // skip: 0,\r\n        // limit: 100,\r\n        order: {\r\n          key: \"createdAt\",\r\n          value: \"asc\",\r\n        },\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selected !== null ||\r\n      (selected !== null &&\r\n        BranchData !== null &&\r\n        selected.id !== BranchData.id)\r\n    ) {\r\n      setBranchData(selected);\r\n    }\r\n  }, [selected, BranchData]);\r\n\r\n  useEffect(() => {\r\n    if (store.status === 200) {\r\n      history.push(\"/apps/cms/branch/list\");\r\n    }\r\n  }, [store.status, history]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const description = draftToHtml(\r\n      convertToRaw(valueContent.getCurrentContent())\r\n    );\r\n    if (isObjEmpty(errors)) {\r\n      setDisable(true);\r\n      dispatch(\r\n        updateBranch({\r\n          id: parseInt(id),\r\n          data: {\r\n            ...values,\r\n            name: values?.name || \"\",\r\n            code_branch: values?.code_branch || \"\",\r\n            addpress: values?.addpress || \"\",\r\n            phone: values?.phone || \"\",\r\n            email: values?.email || \"\",\r\n            description: description || \"\",\r\n            staffId: parseInt(changeSelect?.value),\r\n            status: parseInt(values.status),\r\n            lang,\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (BranchData) {\r\n      setStatus(BranchData.status);\r\n    }\r\n  }, [BranchData]);\r\n  return (\r\n    <Row>\r\n      <Col sm=\"12\">\r\n        <Media className=\"mb-2\">\r\n          <Media className=\"mt-50\" body>\r\n            <h4>{selected.name} </h4>\r\n          </Media>\r\n        </Media>\r\n      </Col>\r\n      <Col sm=\"12\">\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <FormGroup>\r\n            <Label for=\"name\">\r\n              <FormattedMessage id=\"Branch name\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"name\"\r\n              id=\"name\"\r\n              innerRef={register(EditBranchOptions.name)}\r\n              onBlur={() => {\r\n                let name = document.getElementById(\"name\");\r\n                if (name && name.value) {\r\n                  name.value = name.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"name\"] })}\r\n              defaultValue={BranchData && BranchData.name}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.name && errors.name.message}\r\n            </small>\r\n            {errors?.name?.type == \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid kind name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"code_branch\">\r\n              <FormattedMessage id=\"Branch Code\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"code_branch\"\r\n              id=\"code_branch\"\r\n              innerRef={register(EditBranchOptions.code_branch)}\r\n              onBlur={() => {\r\n                let code_branch = document.getElementById(\"code_branch\");\r\n                if (code_branch && code_branch.value) {\r\n                  code_branch.value = code_branch.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"code_branch\"] })}\r\n              defaultValue={BranchData && BranchData.code_branch}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.code_branch && errors.code_branch.message}\r\n            </small>\r\n            {errors?.code_branch?.type == \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid kind name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"description\">\r\n              <FormattedMessage id=\"Description\" />{\" \"}\r\n            </Label>\r\n            <Editor\r\n              stripPastedStyles={true}\r\n              editorState={valueContent}\r\n              onEditorStateChange={(data) => setValueContent(data)}\r\n              name=\"description\"\r\n              innerRef={register}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"addpress\">\r\n              <FormattedMessage id=\"address\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"addpress\"\r\n              id=\"addpress\"\r\n              innerRef={register(EditBranchOptions.addpress)}\r\n              onBlur={() => {\r\n                let addpress = document.getElementById(\"addpress\");\r\n                if (addpress && addpress.value) {\r\n                  addpress.value = addpress.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"addpress\"] })}\r\n              defaultValue={BranchData && BranchData.addpress}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.addpress && errors.addpress.message}\r\n            </small>\r\n            {errors?.addpress?.type == \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid kind name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"email\">\r\n              <FormattedMessage id=\"Email\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"email\"\r\n              id=\"email\"\r\n              innerRef={register(EditBranchOptions.email)}\r\n              onBlur={() => {\r\n                let email = document.getElementById(\"email\");\r\n                if (email && email.value) {\r\n                  email.value = email.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"email\"] })}\r\n              defaultValue={BranchData && BranchData.email}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.email && errors.email.message}\r\n            </small>\r\n            {errors?.email?.type == \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid kind name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"phone\">\r\n              <FormattedMessage id=\"phoneNumber\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"phone\"\r\n              id=\"phone\"\r\n              innerRef={register(EditBranchOptions.phone)}\r\n              onBlur={() => {\r\n                let phone = document.getElementById(\"phone\");\r\n                if (phone && phone.value) {\r\n                  phone.value = phone.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"phone\"] })}\r\n              defaultValue={BranchData && BranchData.phone}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.phone && errors.phone.message}\r\n            </small>\r\n            {errors?.phone?.type == \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid kind name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          {/* <FormGroup>\r\n            <Label>\r\n              <FormattedMessage id=\"Staff\" />\r\n              <span className=\"text-danger\"> * </span>\r\n            </Label>\r\n\r\n            <Controller\r\n              control={control}\r\n              name=\"staffId\"\r\n              render={({ field }) => {\r\n                return (\r\n                  <Select\r\n                    id=\"staffId\"\r\n                    innerRef={register}\r\n                    name=\"staffId\"\r\n                    placeholder={<FormattedMessage id=\"Select Student\" />}\r\n                    defaultValue={selectStudent}\r\n                    className={classnames(\r\n                      \"react-select\",\r\n                      !changeSelect\r\n                        ? {\r\n                            \"is-invalid\": errors[\"staffId\"],\r\n                          }\r\n                        : \"\"\r\n                    )}\r\n                    options={data?.map((item, index) => {\r\n                      return {\r\n                        value: item?.id,\r\n                        label: item.first_name + \" \" + item.last_name || \"\",\r\n                      };\r\n                    })}\r\n                    classNamePrefix=\"select\"\r\n                    {...field}\r\n                    onChange={(e) => {\r\n                      setError(\"staffId\", \"\");\r\n                      setValue(\"staffId\", e?.value);\r\n                      setChangeSelect(e?.value);\r\n                    }}\r\n                  />\r\n                );\r\n              }}\r\n            ></Controller>\r\n\r\n            <small className=\"text-danger\">\r\n              {errors?.staffId && errors.staffId.message}\r\n            </small>\r\n          </FormGroup> */}\r\n\r\n          <FormGroup>\r\n            <Label>\r\n              <FormattedMessage id=\"Staff\" />\r\n              <span className=\"text-danger\"> * </span>\r\n            </Label>\r\n            <Select\r\n              isClearable={false}\r\n              onChange={(e) => changeCate(e)}\r\n              innerRef={register({ required: true })}\r\n              name=\"staffId\"\r\n              value={changeSelect}\r\n              placeholder={<FormattedMessage id=\"Select...\" />}\r\n              options={data?.map((item, index) => {\r\n                return {\r\n                  value: item?.id,\r\n                  label: item.first_name + \" \" + item.last_name || \"\",\r\n                };\r\n              })}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.staffId && errors.staffId.message}\r\n            </small>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"status\">\r\n              <FormattedMessage id=\"Status\" />\r\n            </Label>\r\n\r\n            <Input\r\n              type=\"select\"\r\n              name=\"status\"\r\n              value={status}\r\n              onChange={(e) => setStatus(e.target.value)}\r\n              id=\"status\"\r\n              innerRef={register({ required: true })}\r\n            >\r\n              <option value=\"1\">{intl.formatMessage({ id: \"Active\" })}</option>\r\n              <option value=\"0\">{intl.formatMessage({ id: \"Blocked\" })}</option>\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <div style={{ textAlign: \"end\" }}>\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"mr-1\"\r\n              color=\"primary\"\r\n              disabled={disable}\r\n            >\r\n              <FormattedMessage id=\"update\" />\r\n            </Button>\r\n            <Button\r\n              type=\"reset\"\r\n              color=\"secondary\"\r\n              outline\r\n              onClick={() => history.goBack()}\r\n            >\r\n              <FormattedMessage id=\"Cancel\" />\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default injectIntl(BranchTab);\r\n","import { useEffect, useState } from \"react\";\r\nimport { GitBranch, Pocket } from \"react-feather\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Alert,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  TabContent,\r\n  TabPane,\r\n} from \"reactstrap\";\r\nimport { getBranch } from \"../store/action\";\r\nimport BranchTab from \"./Branch\";\r\n\r\nconst BranchEdit = () => {\r\n  const [activeTab, setActiveTab] = useState(\"1\"),\r\n    store = useSelector((state) => state.branch),\r\n    dispatch = useDispatch(),\r\n    { id } = useParams();\r\n\r\n  const toggle = (tab) => setActiveTab(tab);\r\n\r\n  useEffect(() => {\r\n    dispatch(getBranch(parseInt(id)));\r\n  }, [dispatch]);\r\n\r\n  return store.selected !== null && store.selected !== undefined ? (\r\n    <Row className=\"app-user-edit\">\r\n      <Col sm=\"12\">\r\n        <Card>\r\n          <CardBody className=\"pt-2\">\r\n            <Nav pills>\r\n              <NavItem>\r\n                <NavLink active={activeTab === \"1\"} onClick={() => toggle(\"1\")}>\r\n                  <GitBranch size={14} />\r\n                  <span className=\"align-middle d-none d-sm-block\">\r\n                    <FormattedMessage id=\"Branch\" />\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <BranchTab selected={store.selected} />\r\n              </TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  ) : (\r\n    <Alert color=\"danger\">\r\n      <h4 className=\"alert-heading\">Not found</h4>\r\n    </Alert>\r\n  );\r\n};\r\nexport default BranchEdit;\r\n","import { FormattedMessage } from \"react-intl\";\r\nimport REGEX from \"./regex\";\r\nimport { number } from \"yup\";\r\nconst validateOptions = {\r\n  AboutOptions: {\r\n    about: {\r\n      // required: <FormattedMessage id=\"The about title field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"About title up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  PartnerOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DocumentOptions: {\r\n    label: {\r\n      required: <FormattedMessage id=\"the label field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Label up to 255 characters\" />,\r\n      },\r\n    },\r\n\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n\r\n    short_content: {\r\n      required: <FormattedMessage id=\"the short content field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DiscountOptions: {\r\n    discount: {\r\n      required: <FormattedMessage id=\"the discount field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"The discount is not suitable\" />,\r\n      },\r\n    },\r\n    time: {\r\n      required: <FormattedMessage id=\"The time price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  PriceOptions: {\r\n    price: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n    },\r\n  },\r\n  Document_Link_Options: {\r\n    document_link: {\r\n      required: (\r\n        <FormattedMessage id=\"The time document link field is required\" />\r\n      ),\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  CategoryOptions: {\r\n    code: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n\r\n    message_content: {\r\n      maxLength: {\r\n        value: 30,\r\n        message: <FormattedMessage id=\"Category must be 30 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  BranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n    // short_content: {\r\n    //   required: <FormattedMessage id=\"the short content field is required\" />,\r\n    //   validate: (value) => !REGEX.TITLE.test(value),\r\n    //   maxLength: {\r\n    //     value: 255,\r\n\r\n    //     message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n    //   },\r\n    // },\r\n    // content: {\r\n    //   required: <FormattedMessage id=\"the content field is required\" />,\r\n    //   maxLength: {\r\n    //     value: 3000,\r\n    //     message: <FormattedMessage id=\"Content up to 3000 characters\" />,\r\n    //   },\r\n    // },\r\n  },\r\n\r\n  EditBranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n  },\r\n\r\n  Document_course: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditCategoryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n      // pattern: {\r\n      //   value: REGEX.NAME2,\r\n      //   message: <FormattedMessage id=\"Invalid category name\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditDocumentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    author: {\r\n      required: <FormattedMessage id=\"The Author name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Author name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Author must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  EditQuizOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    contenttext: {\r\n      required: <FormattedMessage id=\"The content field is required\" />,\r\n    },\r\n    answer: {\r\n      required: <FormattedMessage id=\"The answer field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  TermOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    //Học phần\r\n  },\r\n  KindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditKindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  TranscriptOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditTranscriptOptions: {\r\n    student_code: {\r\n      required: <FormattedMessage id=\"The student code field is required\" />,\r\n    },\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  CertificateOptions: {},\r\n  UserCertificateOptions: {},\r\n\r\n  EditCertificateOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"The title must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"The title must be 70 characters max\" />,\r\n      },\r\n    },\r\n    provider: {\r\n      required: <FormattedMessage id=\"Provider field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Provider must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Provider must be 70 characters max\" />,\r\n      },\r\n    },\r\n    position: {\r\n      required: <FormattedMessage id=\"Position field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Position must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Position must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  ProductOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The product's name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Product name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Product name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    vat: {\r\n      required: <FormattedMessage id=\"The VAT field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"VAT more than 0\" />,\r\n      },\r\n      max: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"VAT less than 100\" />,\r\n      },\r\n    },\r\n    number_trial: {\r\n      // required: <FormattedMessage id=\"The Number day field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be greater than or equal to 0\" />\r\n        ),\r\n      },\r\n      max: {\r\n        value: 30,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be less than or equal to 30\" />\r\n        ),\r\n      },\r\n      validate: (value) =>\r\n        value >= 0 || (\r\n          <FormattedMessage id=\"Number day must be a positive number\" />\r\n        ),\r\n    },\r\n    categoryId: {\r\n      required: <FormattedMessage id=\"The category field is required\" />,\r\n      min: {\r\n        value: 0,\r\n      },\r\n    },\r\n    service_price_local: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n\r\n    service_price_cloud: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n  },\r\n  VersionOptions: {\r\n    version: {\r\n      required: <FormattedMessage id=\"The version field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Version up to 255 characters\" />,\r\n      },\r\n    },\r\n    infor: {\r\n      maxLength: {\r\n        value: 500,\r\n        message: <FormattedMessage id=\"Information up to 500 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  StaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditStaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  UserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|\\\\d)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditUserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  CityOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The city name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The city code field is required\" />,\r\n      alidate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n  },\r\n  CountryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The country name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The country code field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    phone_code: {\r\n      required: <FormattedMessage id=\"The phone code field is required\" />,\r\n      validate: (value) => REGEX.PHONE_CODE.test(value),\r\n    },\r\n  },\r\n  StudentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    date: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    },\r\n    // gender: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // courseId: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // formality: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n  },\r\n\r\n  CloudOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The cloud name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Cloud name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Cloud name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    // vat: {\r\n    //   required: <FormattedMessage id=\"The VAT field is required\" />,\r\n    //   min: {\r\n    //     value: 0,\r\n    //     message: <FormattedMessage id=\"VAT more than 0\" />,\r\n    //   },\r\n    //   max: {\r\n    //     value: 100,\r\n    //     message: <FormattedMessage id=\"VAT less than 100\" />,\r\n    //   },\r\n    // },\r\n  },\r\n};\r\nexport default validateOptions;\r\n","import api from \"@constants/api\";\r\nimport Service from \"@services/request\";\r\n\r\nexport const getData = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_BRANCH.method,\r\n      path: api.LIST_BRANCH.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      const dataStaff = [];\r\n      if (response?.data?.data?.length > 0) {\r\n        const promiseStaff = response?.data?.data.map(async (item, index) => {\r\n          if (item?.staffId) {\r\n            await Service.send({\r\n              method: api.GET_STAFF.method,\r\n              path: api.GET_STAFF.path,\r\n              query: { id: item?.staffId },\r\n            }).then((resStaff) => {\r\n              dataStaff[index] = {\r\n                ...item,\r\n                staff: resStaff?.data,\r\n              };\r\n            });\r\n          } else {\r\n            dataStaff[index] = {\r\n              ...item,\r\n              staff: {},\r\n            };\r\n          }\r\n        });\r\n        Promise.all(promiseStaff).then(() => {\r\n          dispatch({\r\n            type: \"GET_DATA_BRANCH\",\r\n            data: dataStaff,\r\n            totalPages: response?.data?.total,\r\n            params,\r\n          });\r\n        });\r\n      }\r\n      dispatch({\r\n        type: \"GET_DATA_BRANCH\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getDataExport = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_BRANCH.method,\r\n      path: api.LIST_BRANCH.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      const dataStaff = [];\r\n      if (response?.data?.data?.length > 0) {\r\n        const promiseStaff = response?.data?.data.map(async (item, index) => {\r\n          if (item?.staffId) {\r\n            await Service.send({\r\n              method: api.GET_STAFF.method,\r\n              path: api.GET_STAFF.path,\r\n              query: { id: item?.staffId },\r\n            }).then((resStaff) => {\r\n              dataStaff[index] = {\r\n                ...item,\r\n                staff: resStaff?.data,\r\n              };\r\n            });\r\n          } else {\r\n            dataStaff[index] = {\r\n              ...item,\r\n              staff: {},\r\n            };\r\n          }\r\n        });\r\n        Promise.all(promiseStaff).then(() => {\r\n          dispatch({\r\n            type: \"GET_DATA_EXPORT_BRANCH\",\r\n            data: dataStaff,\r\n          });\r\n        });\r\n      }\r\n      dispatch({\r\n        type: \"GET_DATA_EXPORT_BRANCH\",\r\n        data: response?.data?.data,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getStaff = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_STAFF.method,\r\n      path: api.LIST_STAFF.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_STAFF\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getStaffId = (staffId) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_STAFF.method,\r\n      path: api.GET_STAFF.path,\r\n      query: { id: staffId },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_STAFF\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const getBranch = (id) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_BRANCH.method,\r\n      path: api.GET_BRANCH.path,\r\n      query: { id },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_BRANCH\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\nexport const addBranch = (Branch) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.CREATE_BRANCH.method,\r\n      path: api.CREATE_BRANCH.path,\r\n      data: Branch,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"ADD_BRANCH\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"ADD_BRANCH\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const updateBranch = (Branch) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.UPDATE_BRANCH.method,\r\n      path: api.UPDATE_BRANCH.path,\r\n      data: Branch,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_BRANCH\",\r\n          response,\r\n        });\r\n      })\r\n\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_BRANCH\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\n"],"sourceRoot":""}