{"version":3,"sources":["views/apps/course/question/edit/CourseQuestion.js","views/apps/course/question/edit/index.js","constants/validate.js","views/apps/course/store/action/index.js"],"names":["injectIntl","_ref","_store$categoryDetail","_store$categoryDetail2","_errors$name","selected","intl","store","useSelector","state","category","_useForm","useForm","register","errors","handleSubmit","history","useHistory","_useState","useState","_useState2","_slicedToArray","categoryData","setCategoryData","lang","common","language","dispatch","useDispatch","_useState3","_useState4","status","setStatus","_useState5","_useState6","disable","setDisable","id","useParams","data","kind","_useState7","_useState8","changcate","setChangcate","options","value","categoryDetail","label","name","_useState9","_useState10","changeSelect","setChangeSelect","EditCategoryOptions","validateOptions","useEffect","_store$err","err","statusCode","getKindId","categoryId","getKind","filter","skip","limit","order","key","_useState11","EditorState","createEmpty","_useState12","valueDescription","setValueDescription","scrollToTop","push","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","description","wrap","_context","prev","next","draftToHtml","convertToRaw","getCurrentContent","isObjEmpty","updateCategory","parseInt","_objectSpread","stop","_x","apply","arguments","htmlToDraftUtil","_jsxs","Row","children","_jsx","Col","sm","Media","className","body","Form","FormGroup","Label","for","FormattedMessage","Input","innerRef","onBlur","document","getElementById","trim","classnames","defaultValue","message","type","Editor","stripPastedStyles","toolbar","inline","inDropdown","editorState","onEditorStateChange","description_en","classNames","Select","isClearable","onChange","e","changeCate","required","placeholder","map","item","index","classNamePrefix","product_name","target","formatMessage","style","textAlign","marginTop","Button","color","disabled","outline","onClick","goBack","CourseTestEdit","activeTab","setActiveTab","getCategory","undefined","Card","CardBody","Nav","pills","NavItem","NavLink","active","AlignJustify","size","TabContent","TabPane","tabId","CourseTestTab","Alert","AboutOptions","about","maxLength","PartnerOptions","DocumentOptions","validate","REGEX","TITLE","test","sort_order","pattern","short_content","DiscountOptions","discount","min","time","PriceOptions","price","Document_Link_Options","document_link","CategoryOptions","code","minLength","message_content","BranchOptions","code_branch","email","EMAIL","phone","addpress","EditBranchOptions","Document_course","EditDocumentOptions","author","EditQuizOptions","title","contenttext","answer","TermOptions","KindOptions","EditKindOptions","TranscriptOptions","score","EditTranscriptOptions","student_code","CertificateOptions","UserCertificateOptions","EditCertificateOptions","provider","position","ProductOptions","NAME2","alidate","SPACE","vat","max","number_trial","service_price_local","PRICE","service_price_cloud","VersionOptions","version","infor","StaffOptions","last_name","NAME","first_name","username","USERNAME","password","EditStaffOptions","UserOptions","PASSWORD","EditUserOptions","CityOptions","CountryOptions","phone_code","PHONE_CODE","StudentOptions","date","CloudOptions","getData","params","Service","send","method","api","LIST_CATEGORY","path","then","response","_response$data","_response$data2","totalPages","total","_callee2","_context2","LIST_KIND","_response$data3","_response$data4","_x2","_ref3","_callee3","_context3","GET_CATEGORY","query","catch","console","log","_x3","_ref4","_callee4","_context4","GET_KIND","_x4","addCategory","Category","_ref5","_callee5","getState","_context5","CREATE_CATEGORY","_x5","_x6","_ref6","_callee6","_context6","UPDATE_CATEGORY","_x7","_x8"],"mappings":"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","file":"static/js/144.28dd3b99.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\n\r\nimport \"react-phone-number-input/style.css\";\r\n\r\nimport { isObjEmpty, scrollToTop } from \"@utils\";\r\n\r\nimport classnames from \"classnames\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Media,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport validateOptions from \"@constants/validate\";\r\nimport { getKind, getKindId, updateCategory } from \"../../store/action\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport { convertToRaw, EditorState } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport { htmlToDraftUtil } from \"@utils\";\r\nimport classNames from \"classnames\";\r\nimport Select from \"react-select\";\r\nimport {} from \"react-scroll-up\";\r\n\r\nconst CategoryTab = ({ selected, intl }) => {\r\n  const store = useSelector((state) => state.category);\r\n  const { register, errors, handleSubmit } = useForm();\r\n  const history = useHistory();\r\n  const [categoryData, setCategoryData] = useState(null);\r\n  const lang = useSelector((state) => state.common.language);\r\n  const dispatch = useDispatch();\r\n  const [status, setStatus] = useState(null);\r\n  const [disable, setDisable] = useState(false);\r\n  const { id } = useParams();\r\n  const { data } = useSelector((state) => state.kind);\r\n  const [changcate, setChangcate] = useState();\r\n  const options = {\r\n    value: store?.categoryDetail?.id,\r\n    label: store?.categoryDetail?.name,\r\n  };\r\n  const [changeSelect, setChangeSelect] = useState(changcate);\r\n  const EditCategoryOptions = validateOptions.EditCategoryOptions;\r\n  const changeCate = (e) => {\r\n    setChangeSelect(e);\r\n  };\r\n  useEffect(() => {\r\n    if (store) {\r\n      setChangcate(options);\r\n    }\r\n  }, [store]);\r\n  useEffect(() => {\r\n    if (changcate) {\r\n      setChangeSelect(changcate);\r\n    }\r\n  }, [changcate]);\r\n  useEffect(() => {\r\n    if (store?.err?.statusCode) {\r\n      setDisable(false);\r\n    }\r\n  }, [store?.err]);\r\n  useEffect(() => {\r\n    dispatch(getKindId(selected?.categoryId));\r\n  }, [dispatch, selected?.categoryId]);\r\n  useEffect(() => {\r\n    dispatch(\r\n      getKind({\r\n        filter: {\r\n          status: 1,\r\n          lang,\r\n        },\r\n        skip: 0,\r\n        limit: 20,\r\n        order: {\r\n          key: \"name\",\r\n          value: \"desc\",\r\n        },\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  const [valueDescription, setValueDescription] = useState(\r\n    EditorState.createEmpty()\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selected !== null ||\r\n      (selected !== null &&\r\n        categoryData !== null &&\r\n        selected.id !== categoryData.id)\r\n    ) {\r\n      setCategoryData(selected);\r\n    }\r\n  }, [selected, categoryData]);\r\n\r\n  useEffect(() => {\r\n    if (store.status === 200) {\r\n      scrollToTop();\r\n      history.push(\"/apps/category/list\");\r\n    }\r\n  }, [store.status, history]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const description = draftToHtml(\r\n      convertToRaw(valueDescription.getCurrentContent())\r\n    );\r\n    if (isObjEmpty(errors)) {\r\n      setDisable(true);\r\n      dispatch(\r\n        updateCategory({\r\n          id: parseInt(id),\r\n          data: {\r\n            ...values,\r\n            name: values.name,\r\n            status: parseInt(values.status),\r\n            description: description,\r\n            categoryId: parseInt(changeSelect?.value),\r\n            lang,\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      setStatus(categoryData.status);\r\n      setValueDescription(htmlToDraftUtil(categoryData?.description || \" \"));\r\n    }\r\n  }, [categoryData]);\r\n  return (\r\n    <Row>\r\n      <Col sm=\"12\">\r\n        <Media className=\"mb-2\">\r\n          <Media className=\"mt-50\" body>\r\n            <h4>{selected.name} </h4>\r\n          </Media>\r\n        </Media>\r\n      </Col>\r\n      <Col sm=\"12\">\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <FormGroup>\r\n            <Label for=\"name\">\r\n              <FormattedMessage id=\"catename\" />{\" \"}\r\n              <span className=\"text-danger\">*</span>\r\n            </Label>\r\n            <Input\r\n              name=\"name\"\r\n              id=\"name\"\r\n              innerRef={register(EditCategoryOptions.name)}\r\n              onBlur={() => {\r\n                let name = document.getElementById(\"name\");\r\n                if (name && name.value) {\r\n                  name.value = name.value.trim();\r\n                }\r\n              }}\r\n              className={classnames({ \"is-invalid\": errors[\"name\"] })}\r\n              defaultValue={categoryData && categoryData.name}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.name && errors.name.message}\r\n            </small>\r\n            {errors?.name?.type === \"validate\" && (\r\n              <small className=\"text-danger\">\r\n                <FormattedMessage id=\"Invalid category name\" />\r\n              </small>\r\n            )}\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"description\">\r\n              <FormattedMessage id=\"Description\" />{\" \"}\r\n            </Label>\r\n\r\n            <Editor\r\n              stripPastedStyles={true}\r\n              toolbar={{\r\n                options: [\"inline\", \"textAlign\"],\r\n                inline: {\r\n                  inDropdown: false,\r\n                  options: [\"bold\", \"italic\", \"underline\"],\r\n                },\r\n              }}\r\n              editorState={valueDescription}\r\n              onEditorStateChange={(data) => setValueDescription(data)}\r\n              name=\"description\"\r\n              innerRef={register(EditCategoryOptions.description_en)}\r\n              className={classNames({\r\n                \"is-invalid\": errors[\"description\"],\r\n              })}\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.description_en && errors.description_en.message}\r\n            </small>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label>\r\n              <FormattedMessage id=\"Solution\" />\r\n              <span className=\"text-danger\"> * </span>\r\n            </Label>\r\n            <Select\r\n              isClearable={false}\r\n              onChange={(e) => changeCate(e)}\r\n              innerRef={register({ required: true })}\r\n              name=\"categoryId\"\r\n              value={changeSelect}\r\n              placeholder={<FormattedMessage id=\"Select...\" />}\r\n              options={data?.map((item, index) => {\r\n                return {\r\n                  value: item?.id,\r\n                  label: item?.name,\r\n                };\r\n              })}\r\n              className=\"react-select\"\r\n              classNamePrefix=\"select\"\r\n            />\r\n            <small className=\"text-danger\">\r\n              {errors?.product_name && errors.product_name.message}\r\n            </small>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"status\">\r\n              <FormattedMessage id=\"Status\" />\r\n            </Label>\r\n\r\n            <Input\r\n              type=\"select\"\r\n              name=\"status\"\r\n              value={status}\r\n              onChange={(e) => setStatus(e.target.value)}\r\n              id=\"status\"\r\n              innerRef={register({ required: true })}\r\n            >\r\n              <option value=\"0\">{intl.formatMessage({ id: \"Blocked\" })}</option>\r\n              <option value=\"1\">{intl.formatMessage({ id: \"Active\" })}</option>\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <div style={{ textAlign: \"end\", marginTop: \"145px\" }}>\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"mr-1\"\r\n              color=\"primary\"\r\n              disabled={disable}\r\n            >\r\n              <FormattedMessage id=\"update\" />\r\n            </Button>\r\n            <Button\r\n              type=\"reset\"\r\n              color=\"secondary\"\r\n              outline\r\n              onClick={() => history.goBack()}\r\n            >\r\n              <FormattedMessage id=\"Cancel\" />\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default injectIntl(CategoryTab);\r\n","import { useEffect, useState } from \"react\";\r\nimport { AlignJustify } from \"react-feather\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Alert,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  TabContent,\r\n  TabPane,\r\n} from \"reactstrap\";\r\nimport { getCategory } from \"../../store/action\";\r\nimport CourseTestTab from \"./CourseQuestion\";\r\n\r\nconst CourseTestEdit = () => {\r\n  const [activeTab, setActiveTab] = useState(\"1\"),\r\n    store = useSelector((state) => state.category),\r\n    dispatch = useDispatch(),\r\n    { id } = useParams();\r\n\r\n  const toggle = (tab) => setActiveTab(tab);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategory(parseInt(id)));\r\n  }, [dispatch]);\r\n\r\n  return store.selected !== null && store.selected !== undefined ? (\r\n    <Row className=\"app-user-edit\">\r\n      <Col sm=\"12\">\r\n        <Card>\r\n          <CardBody className=\"pt-2\">\r\n            <Nav pills>\r\n              <NavItem>\r\n                <NavLink active={activeTab === \"1\"} onClick={() => toggle(\"1\")}>\r\n                  <AlignJustify size={14} />\r\n                  <span className=\"align-middle d-none d-sm-block\">\r\n                    <FormattedMessage id=\"Category\" />\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <CourseTestTab selected={store.selected} store={store} />\r\n              </TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  ) : (\r\n    <Alert color=\"danger\">\r\n      <h4 className=\"alert-heading\">Not found</h4>\r\n    </Alert>\r\n  );\r\n};\r\nexport default CourseTestEdit;\r\n","import { FormattedMessage } from \"react-intl\";\r\nimport REGEX from \"./regex\";\r\nimport { number } from \"yup\";\r\nconst validateOptions = {\r\n  AboutOptions: {\r\n    about: {\r\n      // required: <FormattedMessage id=\"The about title field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"About title up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  PartnerOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DocumentOptions: {\r\n    label: {\r\n      required: <FormattedMessage id=\"the label field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Label up to 255 characters\" />,\r\n      },\r\n    },\r\n\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n\r\n    short_content: {\r\n      required: <FormattedMessage id=\"the short content field is required\" />,\r\n      validate: (value) => !REGEX.TITLE.test(value),\r\n      maxLength: {\r\n        value: 255,\r\n\r\n        message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  DiscountOptions: {\r\n    discount: {\r\n      required: <FormattedMessage id=\"the discount field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"The discount is not suitable\" />,\r\n      },\r\n    },\r\n    time: {\r\n      required: <FormattedMessage id=\"The time price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  PriceOptions: {\r\n    price: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n    },\r\n  },\r\n  Document_Link_Options: {\r\n    document_link: {\r\n      required: (\r\n        <FormattedMessage id=\"The time document link field is required\" />\r\n      ),\r\n      min: {\r\n        value: (value) => parseInt(value),\r\n        message: <FormattedMessage id=\"The extended time is not suitable\" />,\r\n      },\r\n    },\r\n  },\r\n  CategoryOptions: {\r\n    code: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n\r\n    message_content: {\r\n      maxLength: {\r\n        value: 30,\r\n        message: <FormattedMessage id=\"Category must be 30 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  BranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n    // short_content: {\r\n    //   required: <FormattedMessage id=\"the short content field is required\" />,\r\n    //   validate: (value) => !REGEX.TITLE.test(value),\r\n    //   maxLength: {\r\n    //     value: 255,\r\n\r\n    //     message: <FormattedMessage id=\"Short content up to 255 characters\" />,\r\n    //   },\r\n    // },\r\n    // content: {\r\n    //   required: <FormattedMessage id=\"the content field is required\" />,\r\n    //   maxLength: {\r\n    //     value: 3000,\r\n    //     message: <FormattedMessage id=\"Content up to 3000 characters\" />,\r\n    //   },\r\n    // },\r\n  },\r\n\r\n  EditBranchOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The branch name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Branch name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    code_branch: {\r\n      required: <FormattedMessage id=\"The branch code field is required\" />,\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    addpress: {\r\n      required: <FormattedMessage id=\"The address field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Address must be at least 3 characters\" />\r\n        ),\r\n      },\r\n    },\r\n  },\r\n\r\n  Document_course: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditCategoryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n      // pattern: {\r\n      //   value: REGEX.NAME2,\r\n      //   message: <FormattedMessage id=\"Invalid category name\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditDocumentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The category name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Category name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Category must be 70 characters max\" />,\r\n      },\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    author: {\r\n      required: <FormattedMessage id=\"The Author name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Author name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Author must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  EditQuizOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    contenttext: {\r\n      required: <FormattedMessage id=\"The content field is required\" />,\r\n    },\r\n    answer: {\r\n      required: <FormattedMessage id=\"The answer field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  TermOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n    },\r\n    sort_order: {\r\n      required: <FormattedMessage id=\"The sort order field is required\" />,\r\n      pattern: {\r\n        value: /^\\d+$/,\r\n        message: <FormattedMessage id=\"Number Input\" />,\r\n      },\r\n    },\r\n    //Học phần\r\n  },\r\n  KindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  EditKindOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The solution name field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Solution name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Solution must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n  TranscriptOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  EditTranscriptOptions: {\r\n    student_code: {\r\n      required: <FormattedMessage id=\"The student code field is required\" />,\r\n    },\r\n    name: {\r\n      required: <FormattedMessage id=\"The student name field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: (\r\n          <FormattedMessage id=\"Student name must be 70 characters max\" />\r\n        ),\r\n      },\r\n    },\r\n    score: {\r\n      required: <FormattedMessage id=\"The score field is required\" />,\r\n\r\n      // minLength: {\r\n      //   value: 3,\r\n\r\n      //   message: (\r\n      //     <FormattedMessage id=\"Score must be at least 3 characters\" />\r\n      //   ),\r\n      // },\r\n      // maxLength: {\r\n      //   value: 70,\r\n      //   message: <FormattedMessage id=\"Score must be 70 characters max\" />,\r\n      // },\r\n    },\r\n  },\r\n  CertificateOptions: {},\r\n  UserCertificateOptions: {},\r\n\r\n  EditCertificateOptions: {\r\n    title: {\r\n      required: <FormattedMessage id=\"The title field is required\" />,\r\n\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"The title must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"The title must be 70 characters max\" />,\r\n      },\r\n    },\r\n    provider: {\r\n      required: <FormattedMessage id=\"Provider field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Provider must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Provider must be 70 characters max\" />,\r\n      },\r\n    },\r\n    position: {\r\n      required: <FormattedMessage id=\"Position field is required\" />,\r\n      minLength: {\r\n        value: 3,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Position must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 70,\r\n        message: <FormattedMessage id=\"Position must be 70 characters max\" />,\r\n      },\r\n    },\r\n  },\r\n\r\n  ProductOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The product's name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Product name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Product name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    vat: {\r\n      required: <FormattedMessage id=\"The VAT field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: <FormattedMessage id=\"VAT more than 0\" />,\r\n      },\r\n      max: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"VAT less than 100\" />,\r\n      },\r\n    },\r\n    number_trial: {\r\n      // required: <FormattedMessage id=\"The Number day field is required\" />,\r\n      min: {\r\n        value: 0,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be greater than or equal to 0\" />\r\n        ),\r\n      },\r\n      max: {\r\n        value: 30,\r\n        message: (\r\n          <FormattedMessage id=\"Number day must be less than or equal to 30\" />\r\n        ),\r\n      },\r\n      validate: (value) =>\r\n        value >= 0 || (\r\n          <FormattedMessage id=\"Number day must be a positive number\" />\r\n        ),\r\n    },\r\n    categoryId: {\r\n      required: <FormattedMessage id=\"The category field is required\" />,\r\n      min: {\r\n        value: 0,\r\n      },\r\n    },\r\n    service_price_local: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n\r\n    service_price_cloud: {\r\n      required: <FormattedMessage id=\"The price field is required\" />,\r\n      validate: (value) => !REGEX.PRICE.test(value),\r\n      pattern: {\r\n        value: /^0*/g,\r\n        message: <FormattedMessage id=\"Invalid price\" />,\r\n      },\r\n      maxLength: {\r\n        value: 255,\r\n      },\r\n    },\r\n  },\r\n  VersionOptions: {\r\n    version: {\r\n      required: <FormattedMessage id=\"The version field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Version up to 255 characters\" />,\r\n      },\r\n    },\r\n    infor: {\r\n      maxLength: {\r\n        value: 500,\r\n        message: <FormattedMessage id=\"Information up to 500 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  StaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditStaffOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  UserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|\\\\d)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  EditUserOptions: {\r\n    last_name: {\r\n      required: <FormattedMessage id=\"The last name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Last name up to 25 characters\" />,\r\n      },\r\n    },\r\n    first_name: {\r\n      required: <FormattedMessage id=\"The first name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"First name up to 25 characters\" />,\r\n      },\r\n    },\r\n    username: {\r\n      required: <FormattedMessage id=\"The username field is required\" />,\r\n      minLength: {\r\n        value: 6,\r\n\r\n        message: (\r\n          <FormattedMessage id=\"Username must be at least 6 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 50,\r\n        message: <FormattedMessage id=\"username must be 50 characters max\" />,\r\n      },\r\n      pattern: {\r\n        value: REGEX.USERNAME,\r\n        message: <FormattedMessage id=\"Invalid username\" />,\r\n      },\r\n    },\r\n    email: {\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    password: {\r\n      required: <FormattedMessage id=\"The password field is required\" />,\r\n      validate: (value) => !REGEX.PASSWORD.test(value?.trim()),\r\n      minLength: {\r\n        value: 8,\r\n        message: <FormattedMessage id=\"Password minimum 8 characters\" />,\r\n      },\r\n    },\r\n\r\n    phone: {\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n  },\r\n  CityOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The city name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The city code field is required\" />,\r\n      alidate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n  },\r\n  CountryOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The country name field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    code: {\r\n      required: <FormattedMessage id=\"The country code field is required\" />,\r\n      validate: (value) => !REGEX.NAME.test(value),\r\n    },\r\n    phone_code: {\r\n      required: <FormattedMessage id=\"The phone code field is required\" />,\r\n      validate: (value) => REGEX.PHONE_CODE.test(value),\r\n    },\r\n  },\r\n  StudentOptions: {\r\n    name: {\r\n      required: <FormattedMessage id=\"The name field is required\" />,\r\n      maxLength: {\r\n        value: 255,\r\n        message: <FormattedMessage id=\"Partner name up to 255 characters\" />,\r\n      },\r\n    },\r\n    email: {\r\n      required: <FormattedMessage id=\"The email field is required\" />,\r\n      validate: (value) => {\r\n        if (value != \"\") {\r\n          return REGEX.EMAIL.test(value);\r\n        }\r\n      },\r\n\r\n      maxLength: {\r\n        value: 125,\r\n        message: <FormattedMessage id=\"Email up to 125 characters\" />,\r\n      },\r\n    },\r\n    phone: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n      pattern: {\r\n        value:\r\n          /^(0|84)(2(0[3-9]|1[0-6|8|9]|2[0-2|5-9]|3[2-9]|4[0-9]|5[1|2|4-9]|6[0-3|9]|7[0-7]|8[0-9]|9[0-4|6|7|9])|3[2-9]|5[5|6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])([0-9]{7})$/i,\r\n        message: <FormattedMessage id=\"Invalid phone number\" />,\r\n      },\r\n      maxLength: {\r\n        value: 25,\r\n        message: <FormattedMessage id=\"Phone number up to 25 characters\" />,\r\n      },\r\n    },\r\n    date: {\r\n      required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    },\r\n    // gender: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // courseId: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n    // formality: {\r\n    //   required: <FormattedMessage id=\"The phone number field is required\" />,\r\n    // },\r\n  },\r\n\r\n  CloudOptions: {\r\n    product_name: {\r\n      required: <FormattedMessage id=\"The cloud name field is required\" />,\r\n      validate: (value) => !REGEX.NAME2.test(value),\r\n      minLength: {\r\n        value: 3,\r\n        message: (\r\n          <FormattedMessage id=\"Cloud name must be at least 3 characters\" />\r\n        ),\r\n      },\r\n      maxLength: {\r\n        value: 100,\r\n        message: <FormattedMessage id=\"Cloud name up to 100 characters\" />,\r\n      },\r\n      alidate: (value) => !REGEX.SPACE.test(value),\r\n    },\r\n    // vat: {\r\n    //   required: <FormattedMessage id=\"The VAT field is required\" />,\r\n    //   min: {\r\n    //     value: 0,\r\n    //     message: <FormattedMessage id=\"VAT more than 0\" />,\r\n    //   },\r\n    //   max: {\r\n    //     value: 100,\r\n    //     message: <FormattedMessage id=\"VAT less than 100\" />,\r\n    //   },\r\n    // },\r\n  },\r\n};\r\nexport default validateOptions;\r\n","import api from \"../../../../../constants/api\";\r\nimport Service from \"../../../../../services/request\";\r\n\r\nexport const getData = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_CATEGORY.method,\r\n      path: api.LIST_CATEGORY.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_CATEGORY\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\nexport const getKind = (params) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.LIST_KIND.method,\r\n      path: api.LIST_KIND.path,\r\n      data: params,\r\n    }).then((response) => {\r\n      dispatch({\r\n        type: \"GET_DATA_KIND\",\r\n        data: response?.data?.data,\r\n        totalPages: response?.data?.total,\r\n        params,\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport const getCategory = (id) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_CATEGORY.method,\r\n      path: api.GET_CATEGORY.path,\r\n      query: { id },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_CATEGORY\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const getKindId = (categoryId) => {\r\n  return async (dispatch) => {\r\n    await Service.send({\r\n      method: api.GET_KIND.method,\r\n      path: api.GET_KIND.path,\r\n      query: { id: categoryId },\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_KindId\",\r\n          selected: response?.data,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\nexport const addCategory = (Category) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.CREATE_CATEGORY.method,\r\n      path: api.CREATE_CATEGORY.path,\r\n      data: Category,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"ADD_CATEGORY\",\r\n          response,\r\n        });\r\n      })\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"ADD_CATEGORY\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\nexport const updateCategory = (Category) => {\r\n  return async (dispatch, getState) => {\r\n    await Service.send({\r\n      method: api.UPDATE_CATEGORY.method,\r\n      path: api.UPDATE_CATEGORY.path,\r\n      data: Category,\r\n    })\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_CATEGORY\",\r\n          response,\r\n        });\r\n      })\r\n\r\n      .catch((err) =>\r\n        dispatch({\r\n          type: \"UPDATE_CATEGORY\",\r\n          err,\r\n        })\r\n      );\r\n  };\r\n};\r\n"],"sourceRoot":""}